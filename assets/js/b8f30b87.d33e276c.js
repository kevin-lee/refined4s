"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[325],{1197:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"extras-render/extras-render","title":"extras-render module","description":"Import","source":"@site/../generated-docs/docs/extras-render/extras-render.md","sourceDirName":"extras-render","slug":"/extras-render/","permalink":"/docs/extras-render/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"extras-render","title":"extras-render module"},"sidebar":"docsSidebar","previous":{"title":"refined4-doobie","permalink":"/docs/doobie/"},"next":{"title":"refined4-tapir","permalink":"/docs/tapir/"}}');var i=r(4848),s=r(8453);const d={id:"extras-render",title:"extras-render module"},a=void 0,o={},c=[{value:"Import",id:"import",level:2},{value:"Use Drived Instances for Pre-defined Types",id:"use-drived-instances-for-pre-defined-types",level:2},{value:"With Explicit Pre-defined extras-render Support",id:"with-explicit-pre-defined-extras-render-support",level:2},{value:"With <code>deriving</code> Method",id:"with-deriving-method",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.extras.derivation.types.all.given\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.extras.derivation.*\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-drived-instances-for-pre-defined-types",children:"Use Drived Instances for Pre-defined Types"}),"\n",(0,i.jsxs)(n.p,{children:["To make ",(0,i.jsx)(n.code,{children:"Newtype"}),", ",(0,i.jsx)(n.code,{children:"Refined"})," and ",(0,i.jsx)(n.code,{children:"InlinedRefined"})," have ",(0,i.jsx)(n.code,{children:"Render"})," type-class instances derived from the actual values, you can simply use"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.extras.derivation.types.all.given\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,i.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,i.jsx)(n.code,{children:"Render"}),"."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"refined4s.modules.extras.derivation.types.all.given"})," is required only when ",(0,i.jsx)(n.code,{children:"Render"})," is required for the pre-defined types.",(0,i.jsx)("br",{}),"\nSo if you want your ",(0,i.jsx)(n.code,{children:"Newtype"})," or ",(0,i.jsx)(n.code,{children:"Refined"})," or ",(0,i.jsx)(n.code,{children:"InlinedRefined"})," to have ",(0,i.jsx)(n.code,{children:"Render"})," instances,",(0,i.jsx)("br",{}),"\nyou can use ",(0,i.jsx)(n.a,{href:"#with-explicit-pre-defined-extras-render-support",children:"pre-defined traits for extras"})," or the ",(0,i.jsxs)(n.a,{href:"#with-deriving-method",children:[(0,i.jsx)(n.code,{children:"deriving"})," method"]})," instead.",(0,i.jsx)("br",{})]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.*\nimport refined4s.types.all.*\n\nimport extras.render.*\nimport extras.render.syntax.*\n\ndef renderA[A: Render](a: A): Unit = println(a.render)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["With ",(0,i.jsx)(n.code,{children:"derivation.types.all"}),","]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",metastring:"{1}",children:'import refined4s.modules.extras.derivation.types.all.given\n\nfinal case class Person(name: NonEmptyString)\nobject Person {\n  given renderPerson: Render[Person] = person => render"Person(name=${person.name})"\n}\n\nrenderA(NonEmptyString("Tony Stark"))\n// Tony Stark\n\nval thor = Person(NonEmptyString("Thor Odinson"))\n// thor: Person = Person(name = "Thor Odinson")\nrenderA(thor)\n// Person(name=Thor Odinson)\n\nval captainAmerica = Person(NonEmptyString("Steve Rogers"))\n// captainAmerica: Person = Person(name = "Steve Rogers")\nrenderA(captainAmerica)\n// Person(name=Steve Rogers)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"with-explicit-pre-defined-extras-render-support",children:"With Explicit Pre-defined extras-render Support"}),"\n",(0,i.jsxs)(n.p,{children:["There are the following pre-defined traits to support extras' ",(0,i.jsx)(n.code,{children:"Render"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"refined4s.modules.extras.derivation.ExtrasRender"})}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,i.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,i.jsx)(n.code,{children:"Render"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",metastring:"{5,8}",children:'import refined4s.*\nimport refined4s.modules.extras.derivation.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String] with ExtrasRender[String]\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] with ExtrasRender[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\nimport extras.render.*\nimport extras.render.syntax.*\n\nfinal case class Person(name: Name)\n\nfinal case class Item(id: NotEmptyStr)\n\nimport extras.render.syntax.*\n\ndef renderA[A: Render](a: A): Unit = println(a.render)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'renderA(Name("Tony Stark"))\n// Tony Stark\n\nrenderA(NotEmptyStr("Thor Odinson"))\n// Thor Odinson\n\nrenderA(Person(Name("Steve Rogers")).name)\n// Steve Rogers\n\nrenderA(Item(NotEmptyStr("abc-999")).id)\n// abc-999\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"with-deriving-method",children:["With ",(0,i.jsx)(n.code,{children:"deriving"})," Method"]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to have explicit ",(0,i.jsx)(n.code,{children:"Render"})," type-class instances in your ",(0,i.jsx)(n.code,{children:"Newtype"})," or ",(0,i.jsx)(n.code,{children:"Refined"})," or ",(0,i.jsx)(n.code,{children:"InlinedRefined"}),", you can use the ",(0,i.jsx)(n.code,{children:"deriving"})," method."]}),"\n",(0,i.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,i.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,i.jsx)(n.code,{children:"Render"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",metastring:"{10,19}",children:'import cats.*\n\nimport refined4s.*\nimport refined4s.modules.extras.derivation.*\n\nimport extras.render.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String] {\n  given renderName: Render[Name] = deriving[Render]\n}\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n\n  given renderNotEmptyStr: Render[NotEmptyStr] = deriving[Render]\n}\n\nimport extras.render.syntax.*\n\nfinal case class Person(name: Name)\n\nfinal case class Item(id: NotEmptyStr)\n\nimport extras.render.syntax.*\n\ndef renderA[A: Render](a: A): Unit = println(a.render)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'renderA(Name("Tony Stark"))\n// Tony Stark\n\nrenderA(NotEmptyStr("Thor Odinson"))\n// Thor Odinson\n\nrenderA(Person(Name("Steve Rogers")).name)\n// Steve Rogers\n\nrenderA(Item(NotEmptyStr("abc-999")).id)\n// abc-999\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function d(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);