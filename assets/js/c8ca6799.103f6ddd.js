"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[985],{6006:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"chimney/chimney","title":"chimney module","description":"Import","source":"@site/../generated-docs/docs/chimney/chimney.md","sourceDirName":"chimney","slug":"/chimney/","permalink":"/docs/chimney/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"chimney","title":"chimney module"},"sidebar":"docsSidebar","previous":{"title":"refined4-cats","permalink":"/docs/cats/"},"next":{"title":"refined4-circe","permalink":"/docs/circe/"}}');var a=r(4848),i=r(8453);const t={id:"chimney",title:"chimney module"},o=void 0,l={},d=[{value:"Import",id:"import",level:2},{value:"Use Drived Instances for Pre-defined Types",id:"use-drived-instances-for-pre-defined-types",level:2},{value:"With Explicit Pre-defined Chimney Support",id:"with-explicit-pre-defined-chimney-support",level:2},{value:"With <code>auto</code> derivation",id:"with-auto-derivation",level:2}];function m(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.chimney.derivation.types.all.given\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.chimney.derivation.*\n"})}),"\n",(0,a.jsx)(n.h2,{id:"use-drived-instances-for-pre-defined-types",children:"Use Drived Instances for Pre-defined Types"}),"\n",(0,a.jsxs)(n.p,{children:["To use ",(0,a.jsx)(n.code,{children:"Newtype"}),", ",(0,a.jsx)(n.code,{children:"Refined"})," and ",(0,a.jsx)(n.code,{children:"InlinedRefined"})," with Chimney, you need to have type-class instances of ",(0,a.jsx)(n.code,{children:"Transformer[NewType, RawType]"})," and ",(0,a.jsx)(n.code,{children:"PartialTransformer[RawType, NewType]"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"refined4s"})," comes with them already."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.chimney.derivation.types.all.given\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:"{7,16,19}",children:'import refined4s.*\nimport refined4s.types.all.*\n\nimport io.scalaland.chimney\nimport io.scalaland.chimney.dsl.*\n\nimport refined4s.modules.chimney.derivation.types.all.given\n\nfinal case class Person(name: NonEmptyString)\n\nfinal case class User(name: NonEmptyString)\n\nval person = Person(NonEmptyString("Wade Wilson"))\n// person: Person = Person(name = "Wade Wilson")\n\nperson.intoPartial[User].transform\n// res1: Result[User] = Value(value = User(name = "Wade Wilson"))\n\nperson.transformIntoPartial[User]\n// res2: Result[User] = Value(value = User(name = "Wade Wilson"))\n'})}),"\n",(0,a.jsx)(n.h2,{id:"with-explicit-pre-defined-chimney-support",children:"With Explicit Pre-defined Chimney Support"}),"\n",(0,a.jsxs)(n.p,{children:["There are the following pre-defined traits to support chimney's ",(0,a.jsx)(n.code,{children:"Transformer"})," and ",(0,a.jsx)(n.code,{children:"PartialTransformer"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"refined4s.modules.chimney.derivation.ChimneyNewtype"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"refined4s.modules.chimney.derivation.ChimneyRefined"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:"{2,10,18,24,27,30,33,36}",children:'import refined4s.*\nimport refined4s.modules.chimney.derivation.*\n\nimport io.scalaland.chimney.*\nimport io.scalaland.chimney.dsl.*\n\nfinal case class Person(name: Person.Name)\nobject Person {\n  type Name = Name.Type\n  object Name extends Newtype[String], ChimneyNewtype[String]\n}\n\nfinal case class User(name: String)\n\nfinal case class Member(name: Member.Name)\nobject Member {\n  type Name = Name.Type\n  object Name extends Newtype[String], ChimneyNewtype[String]\n}\n\nval person = Person(Person.Name("Wade Wilson"))\n// person: Person = Person(name = "Wade Wilson")\n\nPerson.Name("Wade Wilson").into[String].transform\n// res4: String = "Wade Wilson"\n\nval deadpool = person.transformInto[User]\n// deadpool: User = User(name = "Wade Wilson")\n\ndeadpool.transformInto[Person]\n// res5: Person = Person(name = "Wade Wilson")\n\nval member = person.transformInto[Member]\n// member: Member = Member(name = "Wade Wilson")\n\nmember.transformInto[Person]\n// res6: Person = Person(name = "Wade Wilson")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:"{2,10,24,29,32,35}",children:'import refined4s.*\nimport refined4s.modules.chimney.derivation.*\n\nimport io.scalaland.chimney.*\nimport io.scalaland.chimney.dsl.*\n\nfinal case class XMen(name: XMen.NotEmptyStr)\nobject XMen {\n  type NotEmptyStr = NotEmptyStr.Type\n  object NotEmptyStr extends Refined[String], ChimneyRefined[String] {\n    inline def invalidReason(a: String): String = "non-empty String"\n  \n    inline def predicate(a: String): Boolean = a != ""\n  }\n}\n\nfinal case class MarvelCharacter(name: String)\n\nimport refined4s.types.all.*\n\nfinal case class Hero(name: Hero.Name)\nobject Hero {\n  type Name = Name.Type\n  object Name extends Newtype[NonEmptyString], ChimneyNewtype[NonEmptyString]\n}\n\nval logan = XMen(XMen.NotEmptyStr("James Howlett"))\n// logan: XMen = XMen(name = "James Howlett")\nval wolverine = logan.transformInto[MarvelCharacter]\n// wolverine: MarvelCharacter = MarvelCharacter(name = "James Howlett")\n\nwolverine.transformIntoPartial[XMen]\n// res7: Result[XMen] = Value(value = XMen(name = "James Howlett"))\n\nval hero = logan.transformIntoPartial[Hero]\n// hero: Result[Hero] = Value(value = Hero(name = "James Howlett"))\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"with-auto-derivation",children:["With ",(0,a.jsx)(n.code,{children:"auto"})," derivation"]}),"\n",(0,a.jsxs)(n.p,{children:["If you want to implicitly have ",(0,a.jsx)(n.code,{children:"Transformer"})," and ",(0,a.jsx)(n.code,{children:"PartialTransformer"})," type-class instances for your ",(0,a.jsx)(n.code,{children:"Newtype"})," or ",(0,a.jsx)(n.code,{children:"Refined"})," or ",(0,a.jsx)(n.code,{children:"InlinedRefined"}),", you can use the ",(0,a.jsx)(n.code,{children:"refined4s.modules.chimney.derivation.generic.auto"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:"{4,28,31,34,37,42,45,48,51}",children:'import cats.*\n\nimport refined4s.*\nimport refined4s.modules.chimney.derivation.generic.auto.given\n\nimport io.scalaland.chimney.*\nimport io.scalaland.chimney.dsl.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String]\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] {\n  inline def invalidReason(a: String): String = "NonEmptyStr should be a non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\nfinal case class Person(name: Name)\n\nfinal case class User(name: String)\n\nfinal case class AnotherUser(name: NotEmptyStr)\n\nval person = Person(Name("Wade Wilson"))\n// person: Person = Person(name = "Wade Wilson")\n\nperson.into[User].transform\n// res9: User = User(name = "Wade Wilson")\n\nval user = person.transformInto[User]\n// user: User = User(name = "Wade Wilson")\n\nuser.transformIntoPartial[Person]\n// res10: Result[Person] = Value(value = Person(name = "Wade Wilson"))\n\nval anotherUser = person.transformIntoPartial[AnotherUser]\n// anotherUser: Result[AnotherUser] = Value(\n//   value = AnotherUser(name = "Wade Wilson")\n// )\n\nanotherUser.flatMap(_.transformIntoPartial[Person])\n// res11: Result[Person] = Value(value = Person(name = "Wade Wilson"))\n\nval personWithEmptyName = Person(Name(""))\n// personWithEmptyName: Person = Person(name = "")\n\npersonWithEmptyName.transformInto[User]\n// res12: User = User(name = "")\n\npersonWithEmptyName.transformIntoPartial[AnotherUser]\n// res13: Result[AnotherUser] = Errors(\n//   errors = NonEmptyErrorsChain(\n//     Error(\n//       message = StringMessage(\n//         message = "Invalid value: []. NonEmptyStr should be a non-empty String"\n//       ),\n//       path = Path(elements = List(Accessor(name = "name")))\n//     )\n//   )\n// )\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);