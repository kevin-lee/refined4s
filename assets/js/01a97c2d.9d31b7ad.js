"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60],{7899:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tapir/tapir","title":"tapir module","description":"Import","source":"@site/../generated-docs/docs/tapir/tapir.md","sourceDirName":"tapir","slug":"/tapir/","permalink":"/docs/tapir/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"tapir","title":"tapir module"},"sidebar":"docsSidebar","previous":{"title":"refined4-extras-render","permalink":"/docs/extras-render/"}}');var r=i(4848),a=i(8453);const s={id:"tapir",title:"tapir module"},o=void 0,d={},c=[{value:"Import",id:"import",level:2},{value:"Use Drived Instances for Pre-defined Types",id:"use-drived-instances-for-pre-defined-types",level:2},{value:"With Explicit Pre-defined Tapir Support",id:"with-explicit-pre-defined-tapir-support",level:2},{value:"With <code>deriving</code> Method",id:"with-deriving-method",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.tapir.derivation.types.all.given\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.tapir.derivation.*\n"})}),"\n",(0,r.jsx)(n.h2,{id:"use-drived-instances-for-pre-defined-types",children:"Use Drived Instances for Pre-defined Types"}),"\n",(0,r.jsxs)(n.p,{children:["To make ",(0,r.jsx)(n.code,{children:"Newtype"}),", ",(0,r.jsx)(n.code,{children:"Refined"})," and ",(0,r.jsx)(n.code,{children:"InlinedRefined"})," have ",(0,r.jsx)(n.code,{children:"sttp.tapir.Schema"})," type-class instances derived from the actual values, you can simply use"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.tapir.derivation.types.all.given\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,r.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,r.jsx)(n.code,{children:"Schema"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"refined4s.modules.tapir.derivation.types.all.given"})," is required only when ",(0,r.jsx)(n.code,{children:"sttp.tapir.Schema"})," is required for the pre-defined types.",(0,r.jsx)("br",{}),"\nSo if you want your ",(0,r.jsx)(n.code,{children:"Newtype"})," or ",(0,r.jsx)(n.code,{children:"Refined"})," or ",(0,r.jsx)(n.code,{children:"InlinedRefined"})," to have ",(0,r.jsx)(n.code,{children:"Schema"})," instances,",(0,r.jsx)("br",{}),"\nyou can use ",(0,r.jsx)(n.a,{href:"#with-explicit-pre-defined-tapir-support",children:"pre-defined traits for tapir"})," or the ",(0,r.jsxs)(n.a,{href:"#with-deriving-method",children:[(0,r.jsx)(n.code,{children:"deriving"})," method"]})," instead.",(0,r.jsx)("br",{})]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"import refined4s.*\nimport refined4s.types.all.*\n\nimport sttp.tapir.*\n\ndef validate[A: Schema](a: A): List[ValidationError[?]] = summon[Schema[A]].applyValidation(a)\n// NOTE: You don't need code like this in your project as `Schema` is required by Tapir to generate API docs so just having the Schema type-class instances is good enough.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["With ",(0,r.jsx)(n.code,{children:"derivation.types.all"}),","]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",metastring:"{1}",children:'import refined4s.modules.tapir.derivation.types.all.given\nimport sttp.tapir.generic.auto.* // It\'s only for case classes.\n\nfinal case class Person(name: NonEmptyString)\n\nvalidate(NonEmptyString("Tony Stark"))\n// res1: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nval thor = Person(NonEmptyString("Thor Odinson"))\n// thor: Person = Person(name = "Thor Odinson")\nvalidate(thor)\n// res2: List[ValidationError[_ >: Nothing <: Any]] = List()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"with-explicit-pre-defined-tapir-support",children:"With Explicit Pre-defined Tapir Support"}),"\n",(0,r.jsxs)(n.p,{children:["There are the following pre-defined traits to support tapir's ",(0,r.jsx)(n.code,{children:"Schema"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"refined4s.modules.tapir.derivation.TapirNewtypeSchema"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"refined4s.modules.tapir.derivation.TapirRefinedSchema"})}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,r.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,r.jsx)(n.code,{children:"Schema"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",metastring:"{6,9}",children:'import refined4s.*\nimport refined4s.modules.tapir.derivation.*\nimport sttp.tapir.generic.auto.* // It\'s only for case classes.\n\ntype Name = Name.Type\nobject Name extends Newtype[String] with TapirNewtypeSchema[String]\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] with TapirRefinedSchema[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\nimport sttp.tapir.*\n\nfinal case class Person(name: Name)\n\nfinal case class Item(id: NotEmptyStr)\n\ndef validate[A: Schema](a: A): List[ValidationError[?]] = summon[Schema[A]].applyValidation(a)\n// NOTE: You don\'t need code like this in your project as `Schema` is required by Tapir to generate API docs so just having the Schema type-class instances is good enough.\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'validate(Name("Tony Stark"))\n// res4: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(NotEmptyStr("Thor Odinson"))\n// res5: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(Person(Name("Steve Rogers")))\n// res6: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(Item(NotEmptyStr("abc-999")))\n// res7: List[ValidationError[_ >: Nothing <: Any]] = List()\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"with-deriving-method",children:["With ",(0,r.jsx)(n.code,{children:"deriving"})," Method"]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to have explicit ",(0,r.jsx)(n.code,{children:"sttp.tapir.Schema"})," type-class instances in your ",(0,r.jsx)(n.code,{children:"Newtype"})," or ",(0,r.jsx)(n.code,{children:"Refined"})," or ",(0,r.jsx)(n.code,{children:"InlinedRefined"}),", you can use the ",(0,r.jsx)(n.code,{children:"deriving"})," method."]}),"\n",(0,r.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,r.jsxs)(n.p,{children:["This works only when the actual type already has the ",(0,r.jsx)(n.code,{children:"Schema"})," instance."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",metastring:"{10,19}",children:'import cats.*\n\nimport refined4s.*\nimport sttp.tapir.generic.auto.* // It\'s only for case classes.\n\nimport sttp.tapir.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String] {\n  given schemaName: Schema[Name] = deriving[Schema]\n}\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n\n  given schemaNotEmptyStr: Schema[NotEmptyStr] = deriving[Schema]\n}\n\nimport sttp.tapir.*\n\nfinal case class Person(name: Name)\n\nfinal case class Item(id: NotEmptyStr)\n\ndef validate[A: Schema](a: A): List[ValidationError[?]] = summon[Schema[A]].applyValidation(a)\n// NOTE: You don\'t need code like this in your project as `Schema` is required by Tapir to generate API docs so just having the Schema type-class instances is good enough.\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'validate(Name("Tony Stark"))\n// res9: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(NotEmptyStr("Thor Odinson"))\n// res10: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(Person(Name("Steve Rogers")))\n// res11: List[ValidationError[_ >: Nothing <: Any]] = List()\n\nvalidate(Item(NotEmptyStr("abc-999")))\n// res12: List[ValidationError[_ >: Nothing <: Any]] = List()\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);