"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[273],{3952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"docs/core/refined/custom-type","title":"Custom Type","description":"Import","source":"@site/versioned_docs/version-v0/docs/core/refined/custom-type.md","sourceDirName":"docs/core/refined","slug":"/docs/core/refined/custom-type","permalink":"/docs/v0/docs/core/refined/custom-type","draft":false,"unlisted":false,"tags":[],"version":"v0","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"id":"custom-type","title":"Custom Type"},"sidebar":"sidebar","previous":{"title":"Pre-defined Types","permalink":"/docs/v0/docs/core/refined/types"},"next":{"title":"Newtype + Refined","permalink":"/docs/v0/docs/core/newtype-refined/"}}');var a=t(4848),l=t(8453);const s={sidebar_position:3,id:"custom-type",title:"Custom Type"},d=void 0,r={},o=[{value:"<code>Import</code>",id:"import",level:2},{value:"Define <code>Refined</code> Type",id:"define-refined-type",level:2},{value:"Create Value",id:"create-value",level:2},{value:"With Compile-time Validation",id:"with-compile-time-validation",level:3},{value:"With Runtime Validation",id:"with-runtime-validation",level:3},{value:"Get Actual Value",id:"get-actual-value",level:2},{value:"Pattern Matching",id:"pattern-matching",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"import",children:(0,a.jsx)(n.code,{children:"Import"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.*\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"define-refined-type",children:["Define ",(0,a.jsx)(n.code,{children:"Refined"})," Type"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'type RefinedTypeName = RefinedTypeName.Type\nobject RefinedTypeName extends Refined[ActualType] {\n  override inline def invalidReason(a: ActualType): String =\n    expectedMessage("something with blah blah")\n\n  override inline def predicate(a: ActualType): Boolean =\n    // validation logic here\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"e.g.)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'type MyString = MyString.Type\nobject MyString extends Refined[String] {\n  override inline def invalidReason(a: String): String =\n    expectedMessage("a non-empty String")\n\n  override inline def predicate(a: String): Boolean =\n    a != ""\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"create-value",children:"Create Value"}),"\n",(0,a.jsxs)(n.p,{children:["Given the following ",(0,a.jsx)(n.code,{children:"Refined"})," type,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'type Month = Month.Type\nobject Month extends Refined[Int] {\n  override inline def invalidReason(a: Int): String =\n    expectedMessage("Int between 1 and 12 (1 - 12)")\n\n  override inline def predicate(a: Int): Boolean =\n    a >= 1 && a <= 12\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"with-compile-time-validation",children:"With Compile-time Validation"}),"\n",(0,a.jsxs)(n.p,{children:["If the actual value is a constant value meaning that the actual value is known in compile-time\n(e.g. number, Boolean, String literals), ",(0,a.jsx)(n.code,{children:"Refined"})," provides a compile-time validation\nwith its ",(0,a.jsx)(n.code,{children:"apply"})," method."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Valid cases"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"Month(1)\n// res1: Type = 1\nMonth(12)\n// res2: Type = 12\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Invalid cases"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"Month(0)\n// Month(0)\n// ^^^^^^^^\n// Invalid value: [0]. It must be Int between 1 and 12 (1 - 12)\n\nMonth(13)\n// Month(13)\n// ^^^^^^^^^\n// Invalid value: [13]. It must be Int between 1 and 12 (1 - 12)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"with-runtime-validation",children:"With Runtime Validation"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Valid cases"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val monthInput1 = 1\n// monthInput1: Int = 1\nval monthInput2 = 12\n// monthInput2: Int = 12\n\nMonth.from(monthInput1)\n// res3: Either[String, Type] = Right(value = 1)\nMonth.from(monthInput2)\n// res4: Either[String, Type] = Right(value = 12)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Invalid cases"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val invalidMonthInput1 = 0\n// invalidMonthInput1: Int = 0\nval invalidMonthInput2 = 13\n// invalidMonthInput2: Int = 13\n\nMonth.from(invalidMonthInput1)\n// res5: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be Int between 1 and 12 (1 - 12)"\n// )\nMonth.from(invalidMonthInput2)\n// res6: Either[String, Type] = Left(\n//   value = "Invalid value: [13]. It must be Int between 1 and 12 (1 - 12)"\n// )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"get-actual-value",children:"Get Actual Value"}),"\n",(0,a.jsxs)(n.p,{children:["To get the actual value you can simply use the ",(0,a.jsx)(n.code,{children:"value"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"val month = Month(1)\n// month: Type = 1\nmonth.value\n// res7: Int = 1\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,a.jsxs)(n.p,{children:["For pattern matching, ",(0,a.jsx)(n.code,{children:"Refined"})," has built-in ",(0,a.jsx)(n.code,{children:"unapply"})," so you can simply do"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'month match {\n  case Month(value) =>\n    println(s"Pattern matched value: $value")\n}\n// Pattern matched value: 1\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(6540);const a={},l=i.createContext(a);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);