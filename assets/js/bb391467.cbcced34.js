"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[185],{2467:(n,e,l)=>{l.r(e),l.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>r});var a=l(4848),i=l(8453);const o={sidebar_position:2,id:"types",title:"Pre-defined Types"},s=void 0,t={id:"docs/core/refined/types",title:"Pre-defined Types",description:"Import",source:"@site/versioned_docs/version-v0/docs/core/refined/types.md",sourceDirName:"docs/core/refined",slug:"/docs/core/refined/types",permalink:"/docs/v0/docs/core/refined/types",draft:!1,unlisted:!1,tags:[],version:"v0",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"types",title:"Pre-defined Types"},sidebar:"sidebar",previous:{title:"Refined",permalink:"/docs/v0/docs/core/refined/"},next:{title:"Custom Type",permalink:"/docs/v0/docs/core/refined/custom-type"}},d={},r=[{value:"Import",id:"import",level:2},{value:"Refined <code>Int</code>",id:"refined-int",level:2},{value:"<code>NegInt</code>: negative <code>Int</code>",id:"negint-negative-int",level:2},{value:"Compile-time Validation",id:"compile-time-validation",level:3},{value:"Runtime Validation",id:"runtime-validation",level:3},{value:"Comparison",id:"comparison",level:3},{value:"Get Value",id:"get-value",level:3},{value:"Min and Max Values",id:"min-and-max-values",level:3},{value:"<code>NonNegInt</code>: non-negative <code>Int</code>",id:"nonnegint-non-negative-int",level:2},{value:"Compile-time Validation",id:"compile-time-validation-1",level:3},{value:"Runtime Validation",id:"runtime-validation-1",level:3},{value:"Comparison",id:"comparison-1",level:3},{value:"Get Value",id:"get-value-1",level:3},{value:"Min and Max Values",id:"min-and-max-values-1",level:3},{value:"<code>PosInt</code>: positive <code>Int</code>",id:"posint-positive-int",level:2},{value:"Compile-time Validation",id:"compile-time-validation-2",level:3},{value:"Runtime Validation",id:"runtime-validation-2",level:3},{value:"Comparison",id:"comparison-2",level:3},{value:"Get Value",id:"get-value-2",level:3},{value:"Min and Max Values",id:"min-and-max-values-2",level:3},{value:"<code>NonPosInt</code>: non-positive <code>Int</code>",id:"nonposint-non-positive-int",level:2},{value:"Compile-time Validation",id:"compile-time-validation-3",level:3},{value:"Runtime Validation",id:"runtime-validation-3",level:3},{value:"Comparison",id:"comparison-3",level:3},{value:"Get Value",id:"get-value-3",level:3},{value:"Min and Max Values",id:"min-and-max-values-3",level:3},{value:"Refined <code>Long</code>",id:"refined-long",level:2},{value:"<code>NegLong</code>: negative <code>Long</code>",id:"neglong-negative-long",level:2},{value:"Compile-time Validation",id:"compile-time-validation-4",level:3},{value:"Runtime Validation",id:"runtime-validation-4",level:3},{value:"Comparison",id:"comparison-4",level:3},{value:"Get Value",id:"get-value-4",level:3},{value:"Min and Max Values",id:"min-and-max-values-4",level:3},{value:"<code>NonNegLong</code>: non-negative <code>Long</code>",id:"nonneglong-non-negative-long",level:2},{value:"Compile-time Validation",id:"compile-time-validation-5",level:3},{value:"Runtime Validation",id:"runtime-validation-5",level:3},{value:"Comparison",id:"comparison-5",level:3},{value:"Get Value",id:"get-value-5",level:3},{value:"Min and Max Values",id:"min-and-max-values-5",level:3},{value:"<code>PosLong</code>: positive <code>Long</code>",id:"poslong-positive-long",level:2},{value:"Compile-time Validation",id:"compile-time-validation-6",level:3},{value:"Runtime Validation",id:"runtime-validation-6",level:3},{value:"Comparison",id:"comparison-6",level:3},{value:"Get Value",id:"get-value-6",level:3},{value:"Min and Max Values",id:"min-and-max-values-6",level:3},{value:"<code>NonPosLong</code>: non-positive <code>Long</code>",id:"nonposlong-non-positive-long",level:2},{value:"Compile-time Validation",id:"compile-time-validation-7",level:3},{value:"Runtime Validation",id:"runtime-validation-7",level:3},{value:"Comparison",id:"comparison-7",level:3},{value:"Get Value",id:"get-value-7",level:3},{value:"Min and Max Values",id:"min-and-max-values-7",level:3},{value:"Refined <code>Double</code>",id:"refined-double",level:2},{value:"<code>NegDouble</code>: negative <code>Double</code>",id:"negdouble-negative-double",level:2},{value:"Compile-time Validation",id:"compile-time-validation-8",level:3},{value:"Runtime Validation",id:"runtime-validation-8",level:3},{value:"Comparison",id:"comparison-8",level:3},{value:"Get Value",id:"get-value-8",level:3},{value:"Min and Max Values",id:"min-and-max-values-8",level:3},{value:"<code>NonNegDouble</code>: non-negative <code>Double</code>",id:"nonnegdouble-non-negative-double",level:2},{value:"Compile-time Validation",id:"compile-time-validation-9",level:3},{value:"Runtime Validation",id:"runtime-validation-9",level:3},{value:"Comparison",id:"comparison-9",level:3},{value:"Get Value",id:"get-value-9",level:3},{value:"Min and Max Values",id:"min-and-max-values-9",level:3},{value:"<code>PosDouble</code>: positive <code>Double</code>",id:"posdouble-positive-double",level:2},{value:"Compile-time Validation",id:"compile-time-validation-10",level:3},{value:"Runtime Validation",id:"runtime-validation-10",level:3},{value:"Comparison",id:"comparison-10",level:3},{value:"Get Value",id:"get-value-10",level:3},{value:"Min and Max Values",id:"min-and-max-values-10",level:3},{value:"<code>NonPosDouble</code>: non-positive <code>Double</code>",id:"nonposdouble-non-positive-double",level:2},{value:"Compile-time Validation",id:"compile-time-validation-11",level:3},{value:"Runtime Validation",id:"runtime-validation-11",level:3},{value:"Comparison",id:"comparison-11",level:3},{value:"Get Value",id:"get-value-11",level:3},{value:"Min and Max Values",id:"min-and-max-values-11",level:3},{value:"Refined <code>Float</code>",id:"refined-float",level:2},{value:"<code>NegFloat</code>: negative <code>Float</code>",id:"negfloat-negative-float",level:2},{value:"Compile-time Validation",id:"compile-time-validation-12",level:3},{value:"Runtime Validation",id:"runtime-validation-12",level:3},{value:"Comparison",id:"comparison-12",level:3},{value:"Get Value",id:"get-value-12",level:3},{value:"Min and Max Values",id:"min-and-max-values-12",level:3},{value:"<code>NonNegFloat</code>: non-negative <code>Float</code>",id:"nonnegfloat-non-negative-float",level:2},{value:"Compile-time Validation",id:"compile-time-validation-13",level:3},{value:"Runtime Validation",id:"runtime-validation-13",level:3},{value:"Comparison",id:"comparison-13",level:3},{value:"Get Value",id:"get-value-13",level:3},{value:"Min and Max Values",id:"min-and-max-values-13",level:3},{value:"<code>PosFloat</code>: positive <code>Float</code>",id:"posfloat-positive-float",level:2},{value:"Compile-time Validation",id:"compile-time-validation-14",level:3},{value:"Runtime Validation",id:"runtime-validation-14",level:3},{value:"Comparison",id:"comparison-14",level:3},{value:"Get Value",id:"get-value-14",level:3},{value:"Min and Max Values",id:"min-and-max-values-14",level:3},{value:"<code>NonPosFloat</code>: non-positive <code>Float</code>",id:"nonposfloat-non-positive-float",level:2},{value:"Compile-time Validation",id:"compile-time-validation-15",level:3},{value:"Runtime Validation",id:"runtime-validation-15",level:3},{value:"Comparison",id:"comparison-15",level:3},{value:"Get Value",id:"get-value-15",level:3},{value:"Min and Max Values",id:"min-and-max-values-15",level:3},{value:"Refined <code>BigInt</code>",id:"refined-bigint",level:2},{value:"<code>NegBigInt</code>: negative <code>BigInt</code>",id:"negbigint-negative-bigint",level:2},{value:"Compile-time Validation",id:"compile-time-validation-16",level:3},{value:"Runtime Validation",id:"runtime-validation-16",level:3},{value:"Comparison",id:"comparison-16",level:3},{value:"Get Value",id:"get-value-16",level:3},{value:"<code>NonNegBigInt</code>: non-negative <code>BigInt</code>",id:"nonnegbigint-non-negative-bigint",level:2},{value:"Compile-time Validation",id:"compile-time-validation-17",level:3},{value:"Runtime Validation",id:"runtime-validation-17",level:3},{value:"Comparison",id:"comparison-17",level:3},{value:"Get Value",id:"get-value-17",level:3},{value:"<code>PosBigInt</code>: positive <code>BigInt</code>",id:"posbigint-positive-bigint",level:2},{value:"Compile-time Validation",id:"compile-time-validation-18",level:3},{value:"Runtime Validation",id:"runtime-validation-18",level:3},{value:"Comparison",id:"comparison-18",level:3},{value:"Get Value",id:"get-value-18",level:3},{value:"<code>NonPosBigInt</code>: non-positive <code>BigInt</code>",id:"nonposbigint-non-positive-bigint",level:2},{value:"Compile-time Validation",id:"compile-time-validation-19",level:3},{value:"Runtime Validation",id:"runtime-validation-19",level:3},{value:"Comparison",id:"comparison-19",level:3},{value:"Get Value",id:"get-value-19",level:3},{value:"Refined <code>BigDecimal</code>",id:"refined-bigdecimal",level:2},{value:"<code>NegBigDecimal</code>: negative <code>BigDecimal</code>",id:"negbigdecimal-negative-bigdecimal",level:2},{value:"Compile-time Validation",id:"compile-time-validation-20",level:3},{value:"Runtime Validation",id:"runtime-validation-20",level:3},{value:"Comparison",id:"comparison-20",level:3},{value:"Get Value",id:"get-value-20",level:3},{value:"<code>NonNegBigDecimal</code>: non-negative <code>BigDecimal</code>",id:"nonnegbigdecimal-non-negative-bigdecimal",level:2},{value:"Compile-time Validation",id:"compile-time-validation-21",level:3},{value:"Runtime Validation",id:"runtime-validation-21",level:3},{value:"Comparison",id:"comparison-21",level:3},{value:"Get Value",id:"get-value-21",level:3},{value:"<code>PosBigDecimal</code>: positive <code>BigDecimal</code>",id:"posbigdecimal-positive-bigdecimal",level:2},{value:"Compile-time Validation",id:"compile-time-validation-22",level:3},{value:"Runtime Validation",id:"runtime-validation-22",level:3},{value:"Comparison",id:"comparison-22",level:3},{value:"Get Value",id:"get-value-22",level:3},{value:"<code>NonPosBigDecimal</code>: non-positive <code>BigDecimal</code>",id:"nonposbigdecimal-non-positive-bigdecimal",level:2},{value:"Compile-time Validation",id:"compile-time-validation-23",level:3},{value:"Runtime Validation",id:"runtime-validation-23",level:3},{value:"Comparison",id:"comparison-23",level:3},{value:"Get Value",id:"get-value-23",level:3},{value:"Refined <code>NonEmptyString</code>",id:"refined-nonemptystring",level:2},{value:"Compile-time Validation",id:"compile-time-validation-24",level:3},{value:"Runtime Validation",id:"runtime-validation-24",level:3},{value:"Concatenation",id:"concatenation",level:3},{value:"Get Value",id:"get-value-24",level:3},{value:"Refined <code>NonBlankString</code>",id:"refined-nonblankstring",level:2},{value:"Compile-time Validation",id:"compile-time-validation-25",level:3},{value:"Runtime Validation",id:"runtime-validation-25",level:3},{value:"Concatenation",id:"concatenation-1",level:3},{value:"Get Value",id:"get-value-25",level:3},{value:"Refined <code>Uuid</code>",id:"refined-uuid",level:2},{value:"Compile-time Validation",id:"compile-time-validation-26",level:3},{value:"Runtime Validation",id:"runtime-validation-26",level:3},{value:"To <code>java.util.UUID</code>",id:"to-javautiluuid",level:3},{value:"Get Value",id:"get-value-26",level:3},{value:"Refined <code>Uri</code>",id:"refined-uri",level:2},{value:"Compile-time Validation",id:"compile-time-validation-27",level:3},{value:"Runtime Validation",id:"runtime-validation-27",level:3},{value:"Get Value",id:"get-value-27",level:3},{value:"Convert to <code>java.net.URI</code>",id:"convert-to-javaneturi",level:3}];function g(n){const e={code:"code",h2:"h2",h3:"h3",hr:"hr",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"import",children:"Import"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"import refined4s.types.all.*\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"refined-int",children:["Refined ",(0,a.jsx)(e.code,{children:"Int"})]}),"\n",(0,a.jsxs)(e.h2,{id:"negint-negative-int",children:[(0,a.jsx)(e.code,{children:"NegInt"}),": negative ",(0,a.jsx)(e.code,{children:"Int"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegInt(-1)\n// res0: Type = -1\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegInt(0)\n// error: \n// Invalid value: [0]. It must be a negative Int\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegInt(1)\n// error: \n// Invalid value: [1]. It must be a negative Int\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegInt = -1 \n// validNegInt: Int = -1\nNegInt.from(validNegInt)\n// res3: Either[String, Type] = Right(value = -1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegInt1 = 0 \n// invalidNegInt1: Int = 0\nNegInt.from(invalidNegInt1)\n// res4: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative Int"\n// )\n\nval invalidNegInt2 = 1\n// invalidNegInt2: Int = 1\nNegInt.from(invalidNegInt2)\n// res5: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative Int"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negInt1 = NegInt(-1)\n// negInt1: Type = -1\nval negInt2 = NegInt(-2)\n// negInt2: Type = -2\n\nnegInt1 > negInt2\n// res6: Boolean = true\nnegInt1 >= negInt2\n// res7: Boolean = true\nnegInt1 == negInt2\n// res8: Boolean = false\nnegInt1 < negInt2\n// res9: Boolean = false\nnegInt1 <= negInt2\n// res10: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negInt123 = NegInt(-123)\n// negInt123: Type = -123\nval negInt999 = NegInt(-999)\n// negInt999: Type = -999\n\nnegInt123.value\n// res11: Int = -123\n\nnegInt999.value\n// res12: Int = -999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegInt.MinValue\n// res13: Type = -2147483648\n\nNegInt.MaxValue\n// res14: Type = -1\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonnegint-non-negative-int",children:[(0,a.jsx)(e.code,{children:"NonNegInt"}),": non-negative ",(0,a.jsx)(e.code,{children:"Int"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-1",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegInt(0)\n// res15: Type = 0\nNonNegInt(1)\n// res16: Type = 1\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegInt(-2)\n// error:\n// Invalid value: [-2]. It must be a non-negative Int\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-1",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegInt = 1 \n// validNonNegInt: Int = 1\nNonNegInt.from(validNonNegInt)\n// res17: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegInt1 = -1\n// invalidNonNegInt1: Int = -1\nNonNegInt.from(invalidNonNegInt1)\n// res18: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative Int"\n// )\n\nval invalidNonNegInt2 = -999\n// invalidNonNegInt2: Int = -999\nNonNegInt.from(invalidNonNegInt2)\n// res19: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative Int"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-1",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegInt1 = NonNegInt(0)\n// nonNegInt1: Type = 0\nval nonNegInt2 = NonNegInt(999)\n// nonNegInt2: Type = 999\n\nnonNegInt1 > nonNegInt2\n// res20: Boolean = false\nnonNegInt1 >= nonNegInt2\n// res21: Boolean = false\nnonNegInt1 == nonNegInt2\n// res22: Boolean = false\nnonNegInt1 < nonNegInt2\n// res23: Boolean = true\nnonNegInt1 <= nonNegInt2\n// res24: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-1",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegInt123 = NonNegInt(0)\n// nonNegInt123: Type = 0\nval nonNegInt999 = NonNegInt(999)\n// nonNegInt999: Type = 999\n\nnonNegInt123.value\n// res25: Int = 0\n\nnonNegInt999.value\n// res26: Int = 999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-1",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegInt.MinValue\n// res27: Type = 0\n\nNonNegInt.MaxValue\n// res28: Type = 2147483647\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"posint-positive-int",children:[(0,a.jsx)(e.code,{children:"PosInt"}),": positive ",(0,a.jsx)(e.code,{children:"Int"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-2",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosInt(1)\n// res29: Type = 1\nPosInt(999)\n// res30: Type = 999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosInt(0)\n// error:\n// Invalid value: [0]. It must be a positive Int\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosInt(-2)\n// error:\n// Invalid value: [-2]. It must be a positive Int\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-2",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosInt = 1\n// validPosInt: Int = 1\nPosInt.from(validPosInt)\n// res31: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosInt1 = 0\n// invalidPosInt1: Int = 0\nPosInt.from(invalidPosInt1)\n// res32: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive Int"\n// )\n\nval invalidPosInt2 = -999\n// invalidPosInt2: Int = -999\nPosInt.from(invalidPosInt2)\n// res33: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive Int"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-2",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posInt1 = PosInt(1)\n// posInt1: Type = 1\nval posInt2 = PosInt(999)\n// posInt2: Type = 999\n\nposInt1 > posInt2\n// res34: Boolean = false\nposInt1 >= posInt2\n// res35: Boolean = false\nposInt1 == posInt2\n// res36: Boolean = false\nposInt1 < posInt2\n// res37: Boolean = true\nposInt1 <= posInt2\n// res38: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-2",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posInt123 = PosInt(123)\n// posInt123: Type = 123\nval posInt999 = PosInt(999)\n// posInt999: Type = 999\n\nposInt123.value\n// res39: Int = 123\n\nposInt999.value\n// res40: Int = 999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-2",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosInt.MinValue\n// res41: Type = 1\n\nPosInt.MaxValue\n// res42: Type = 2147483647\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposint-non-positive-int",children:[(0,a.jsx)(e.code,{children:"NonPosInt"}),": non-positive ",(0,a.jsx)(e.code,{children:"Int"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-3",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosInt(0)\n// res43: Type = 0\nNonPosInt(-999)\n// res44: Type = -999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosInt(1)\n// error:\n// Invalid value: [1]. It must be a non-positive Int\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-3",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosInt = 0\n// validNonPosInt: Int = 0\nNonPosInt.from(validNonPosInt)\n// res45: Either[String, Type] = Right(value = 0)\n\nval validNonPosInt2 = -999\n// validNonPosInt2: Int = -999\nNonPosInt.from(validNonPosInt2)\n// res46: Either[String, Type] = Right(value = -999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosInt1 = 1\n// invalidNonPosInt1: Int = 1\nNonPosInt.from(invalidNonPosInt1)\n// res47: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive Int"\n// )\n\nval invalidNonPosInt2 = 999\n// invalidNonPosInt2: Int = 999\nNonPosInt.from(invalidNonPosInt2)\n// res48: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive Int"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-3",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosInt1 = NonPosInt(0)\n// nonPosInt1: Type = 0\nval nonPosInt2 = NonPosInt(-999)\n// nonPosInt2: Type = -999\n\nnonPosInt1 > nonPosInt2\n// res49: Boolean = true\nnonPosInt1 >= nonPosInt2\n// res50: Boolean = true\nnonPosInt1 == nonPosInt2\n// res51: Boolean = false\nnonPosInt1 < nonPosInt2\n// res52: Boolean = false\nnonPosInt1 <= nonPosInt2\n// res53: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-3",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosInt0 = NonPosInt(0)\n// nonPosInt0: Type = 0\nval nonPosIntMinus999 = NonPosInt(-999)\n// nonPosIntMinus999: Type = -999\n\nnonPosInt0.value\n// res54: Int = 0\n\nnonPosIntMinus999.value\n// res55: Int = -999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-3",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosInt.MinValue\n// res56: Type = -2147483648\n\nNonPosInt.MaxValue\n// res57: Type = 0\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-long",children:["Refined ",(0,a.jsx)(e.code,{children:"Long"})]}),"\n",(0,a.jsxs)(e.h2,{id:"neglong-negative-long",children:[(0,a.jsx)(e.code,{children:"NegLong"}),": negative ",(0,a.jsx)(e.code,{children:"Long"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-4",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegLong(-1L)\n// res58: Type = -1L\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegLong(0L)\n// error:\n// Invalid value: [0L]. It must be a negative Long\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegLong(1L)\n// error:\n// Invalid value: [1L]. It must be a negative Long\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-4",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegLong = -1L \n// validNegLong: Long = -1L\nNegLong.from(validNegLong)\n// res59: Either[String, Type] = Right(value = -1L)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegLong1 = 0L \n// invalidNegLong1: Long = 0L\nNegLong.from(invalidNegLong1)\n// res60: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative Long"\n// )\n\nval invalidNegLong2 = 1L\n// invalidNegLong2: Long = 1L\nNegLong.from(invalidNegLong2)\n// res61: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative Long"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-4",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negLong1 = NegLong(-1L)\n// negLong1: Type = -1L\nval negLong2 = NegLong(-2L)\n// negLong2: Type = -2L\n\nnegLong1 > negLong2\n// res62: Boolean = true\nnegLong1 >= negLong2\n// res63: Boolean = true\nnegLong1 == negLong2\n// res64: Boolean = false\nnegLong1 < negLong2\n// res65: Boolean = false\nnegLong1 <= negLong2\n// res66: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-4",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negLong123 = NegLong(-123L)\n// negLong123: Type = -123L\nval negLong999 = NegLong(-999L)\n// negLong999: Type = -999L\n\nnegLong123.value\n// res67: Long = -123L\n\nnegLong999.value\n// res68: Long = -999L\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-4",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegLong.MinValue\n// res69: Type = -9223372036854775808L\n\nNegLong.MaxValue\n// res70: Type = -1L\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonneglong-non-negative-long",children:[(0,a.jsx)(e.code,{children:"NonNegLong"}),": non-negative ",(0,a.jsx)(e.code,{children:"Long"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-5",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegLong(0L)\n// res71: Type = 0L\nNonNegLong(1L)\n// res72: Type = 1L\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegLong(-2L)\n// error:\n// Invalid value: [-2L]. It must be a non-negative Long\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-5",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegLong = 1L\n// validNonNegLong: Long = 1L\nNonNegLong.from(validNonNegLong)\n// res73: Either[String, Type] = Right(value = 1L)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegLong1 = -1L\n// invalidNonNegLong1: Long = -1L\nNonNegLong.from(invalidNonNegLong1)\n// res74: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative Long"\n// )\n\nval invalidNonNegLong2 = -999L\n// invalidNonNegLong2: Long = -999L\nNonNegLong.from(invalidNonNegLong2)\n// res75: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative Long"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-5",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegLong1 = NonNegLong(0L)\n// nonNegLong1: Type = 0L\nval nonNegLong2 = NonNegLong(999L)\n// nonNegLong2: Type = 999L\n\nnonNegLong1 > nonNegLong2\n// res76: Boolean = false\nnonNegLong1 >= nonNegLong2\n// res77: Boolean = false\nnonNegLong1 == nonNegLong2\n// res78: Boolean = false\nnonNegLong1 < nonNegLong2\n// res79: Boolean = true\nnonNegLong1 <= nonNegLong2\n// res80: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-5",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegLong123 = NonNegLong(0L)\n// nonNegLong123: Type = 0L\nval nonNegLong999 = NonNegLong(999L)\n// nonNegLong999: Type = 999L\n\nnonNegLong123.value\n// res81: Long = 0L\n\nnonNegLong999.value\n// res82: Long = 999L\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-5",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegLong.MinValue\n// res83: Type = 0L\n\nNonNegLong.MaxValue\n// res84: Type = 9223372036854775807L\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"poslong-positive-long",children:[(0,a.jsx)(e.code,{children:"PosLong"}),": positive ",(0,a.jsx)(e.code,{children:"Long"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-6",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosLong(1L)\n// res85: Type = 1L\nPosLong(999L)\n// res86: Type = 999L\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosLong(0L)\n// error:\n// Invalid value: [0L]. It must be a positive Long\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosLong(-2L)\n// error:\n// Invalid value: [-2L]. It must be a positive Long\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-6",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosLong = 1L\n// validPosLong: Long = 1L\nPosLong.from(validPosLong)\n// res87: Either[String, Type] = Right(value = 1L)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosLong1 = 0L\n// invalidPosLong1: Long = 0L\nPosLong.from(invalidPosLong1)\n// res88: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive Long"\n// )\n\nval invalidPosLong2 = -999L\n// invalidPosLong2: Long = -999L\nPosLong.from(invalidPosLong2)\n// res89: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive Long"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-6",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posLong1 = PosLong(1L)\n// posLong1: Type = 1L\nval posLong2 = PosLong(999L)\n// posLong2: Type = 999L\n\nposLong1 > posLong2\n// res90: Boolean = false\nposLong1 >= posLong2\n// res91: Boolean = false\nposLong1 == posLong2\n// res92: Boolean = false\nposLong1 < posLong2\n// res93: Boolean = true\nposLong1 <= posLong2\n// res94: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-6",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posLong123 = PosLong(123L)\n// posLong123: Type = 123L\nval posLong999 = PosLong(999L)\n// posLong999: Type = 999L\n\nposLong123.value\n// res95: Long = 123L\n\nposLong999.value\n// res96: Long = 999L\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-6",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosLong.MinValue\n// res97: Type = 1L\n\nPosLong.MaxValue\n// res98: Type = 9223372036854775807L\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposlong-non-positive-long",children:[(0,a.jsx)(e.code,{children:"NonPosLong"}),": non-positive ",(0,a.jsx)(e.code,{children:"Long"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-7",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosLong(0L)\n// res99: Type = 0L\nNonPosLong(-999L)\n// res100: Type = -999L\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosLong(1L)\n// error:\n// Invalid value: [1L]. It must be a non-positive Long\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-7",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosLong = 0L\n// validNonPosLong: Long = 0L\nNonPosLong.from(validNonPosLong)\n// res101: Either[String, Type] = Right(value = 0L)\n\nval validNonPosLong2 = -999L\n// validNonPosLong2: Long = -999L\nNonPosLong.from(validNonPosLong2)\n// res102: Either[String, Type] = Right(value = -999L)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosLong1 = 1L\n// invalidNonPosLong1: Long = 1L\nNonPosLong.from(invalidNonPosLong1)\n// res103: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive Long"\n// )\n\nval invalidNonPosLong2 = 999L\n// invalidNonPosLong2: Long = 999L\nNonPosLong.from(invalidNonPosLong2)\n// res104: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive Long"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-7",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosLong1 = NonPosLong(0L)\n// nonPosLong1: Type = 0L\nval nonPosLong2 = NonPosLong(-999L)\n// nonPosLong2: Type = -999L\n\nnonPosLong1 > nonPosLong2\n// res105: Boolean = true\nnonPosLong1 >= nonPosLong2\n// res106: Boolean = true\nnonPosLong1 == nonPosLong2\n// res107: Boolean = false\nnonPosLong1 < nonPosLong2\n// res108: Boolean = false\nnonPosLong1 <= nonPosLong2\n// res109: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-7",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosLong0 = NonPosLong(0L)\n// nonPosLong0: Type = 0L\nval nonPosLongMinus999 = NonPosLong(-999L)\n// nonPosLongMinus999: Type = -999L\n\nnonPosLong0.value\n// res110: Long = 0L\n\nnonPosLongMinus999.value\n// res111: Long = -999L\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-7",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosLong.MinValue\n// res112: Type = -9223372036854775808L\n\nNonPosLong.MaxValue\n// res113: Type = 0L\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-double",children:["Refined ",(0,a.jsx)(e.code,{children:"Double"})]}),"\n",(0,a.jsxs)(e.h2,{id:"negdouble-negative-double",children:[(0,a.jsx)(e.code,{children:"NegDouble"}),": negative ",(0,a.jsx)(e.code,{children:"Double"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-8",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegDouble(-0.00001d)\n// res114: Type = -1.0E-5\nNegDouble(-999.999d)\n// res115: Type = -999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegDouble(0d)\n// error:\n// Invalid value: [0.0d]. It must be a negative Double\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegDouble(999.999d)\n// error:\n// Invalid value: [999.999d]. It must be a negative Double\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-8",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegDouble = -0.00001d \n// validNegDouble: Double = -1.0E-5\nNegDouble.from(validNegDouble)\n// res116: Either[String, Type] = Right(value = -1.0E-5)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegDouble1 = 0d \n// invalidNegDouble1: Double = 0.0\nNegDouble.from(invalidNegDouble1)\n// res117: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a negative Double"\n// )\n\nval invalidNegDouble2 = 999.999d\n// invalidNegDouble2: Double = 999.999\nNegDouble.from(invalidNegDouble2)\n// res118: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a negative Double"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-8",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negDouble1 = NegDouble(-0.1d)\n// negDouble1: Type = -0.1\nval negDouble2 = NegDouble(-0.2d)\n// negDouble2: Type = -0.2\n\nnegDouble1 > negDouble2\n// res119: Boolean = true\nnegDouble1 >= negDouble2\n// res120: Boolean = true\nnegDouble1 == negDouble2\n// res121: Boolean = false\nnegDouble1 < negDouble2\n// res122: Boolean = false\nnegDouble1 <= negDouble2\n// res123: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-8",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negDouble123 = NegDouble(-123.123d)\n// negDouble123: Type = -123.123\nval negDouble999 = NegDouble(-999.999d)\n// negDouble999: Type = -999.999\n\nnegDouble123.value\n// res124: Double = -123.123\n\nnegDouble999.value\n// res125: Double = -999.999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-8",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegDouble.MinValue\n// res126: Type = -1.7976931348623157E308\n\nNegDouble.MaxValue\n// res127: Type = -4.9E-324\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonnegdouble-non-negative-double",children:[(0,a.jsx)(e.code,{children:"NonNegDouble"}),": non-negative ",(0,a.jsx)(e.code,{children:"Double"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-9",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegDouble(0d)\n// res128: Type = 0.0\nNonNegDouble(999.999d)\n// res129: Type = 999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegDouble(-0.00001d)\n// error:\n// Invalid value: [-1.0E-5d]. It must be a non-negative Double\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegDouble(-999.999d)\n// error:\n// Invalid value: [-999.999d]. It must be a non-negative Double\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-9",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegDouble1 = 0d\n// validNonNegDouble1: Double = 0.0\nNonNegDouble.from(validNonNegDouble1)\n// res130: Either[String, Type] = Right(value = 0.0)\n\nval validNonNegDouble2 = 999.999d\n// validNonNegDouble2: Double = 999.999\nNonNegDouble.from(validNonNegDouble2)\n// res131: Either[String, Type] = Right(value = 999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegDouble1 = -0.00001d\n// invalidNonNegDouble1: Double = -1.0E-5\nNonNegDouble.from(invalidNonNegDouble1)\n// res132: Either[String, Type] = Left(\n//   value = "Invalid value: [-1.0E-5]. It must be a non-negative Double"\n// )\n\nval invalidNonNegDouble2 = -999.999d\n// invalidNonNegDouble2: Double = -999.999\nNonNegDouble.from(invalidNonNegDouble2)\n// res133: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a non-negative Double"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-9",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegDouble1 = NonNegDouble(0d)\n// nonNegDouble1: Type = 0.0\nval nonNegDouble2 = NonNegDouble(0.999d)\n// nonNegDouble2: Type = 0.999\n\nnonNegDouble1 > nonNegDouble2\n// res134: Boolean = false\nnonNegDouble1 >= nonNegDouble2\n// res135: Boolean = false\nnonNegDouble1 == nonNegDouble2\n// res136: Boolean = false\nnonNegDouble1 < nonNegDouble2\n// res137: Boolean = true\nnonNegDouble1 <= nonNegDouble2\n// res138: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-9",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegDouble123 = NonNegDouble(0d)\n// nonNegDouble123: Type = 0.0\nval nonNegDouble999 = NonNegDouble(999.999d)\n// nonNegDouble999: Type = 999.999\n\nnonNegDouble123.value\n// res139: Double = 0.0\n\nnonNegDouble999.value\n// res140: Double = 999.999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-9",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegDouble.MinValue\n// res141: Type = 0.0\n\nNonNegDouble.MaxValue\n// res142: Type = 1.7976931348623157E308\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"posdouble-positive-double",children:[(0,a.jsx)(e.code,{children:"PosDouble"}),": positive ",(0,a.jsx)(e.code,{children:"Double"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-10",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosDouble(0.00001d)\n// res143: Type = 1.0E-5\nPosDouble(999.999d)\n// res144: Type = 999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosDouble(0d)\n// error:\n// Invalid value: [0.0d]. It must be a positive Double\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosDouble(-999.999d)\n// error:\n// Invalid value: [-999.999d]. It must be a positive Double\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-10",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosDouble1 = 0.00001d\n// validPosDouble1: Double = 1.0E-5\nPosDouble.from(validPosDouble1)\n// res145: Either[String, Type] = Right(value = 1.0E-5)\n\nval validPosDouble2 = 999.999d\n// validPosDouble2: Double = 999.999\nPosDouble.from(validPosDouble2)\n// res146: Either[String, Type] = Right(value = 999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosDouble1 = 0d\n// invalidPosDouble1: Double = 0.0\nPosDouble.from(invalidPosDouble1)\n// res147: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a positive Double"\n// )\n\nval invalidPosDouble2 = -999.999d\n// invalidPosDouble2: Double = -999.999\nPosDouble.from(invalidPosDouble2)\n// res148: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a positive Double"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-10",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posDouble1 = PosDouble(0.00001d)\n// posDouble1: Type = 1.0E-5\nval posDouble2 = PosDouble(0.999d)\n// posDouble2: Type = 0.999\n\nposDouble1 > posDouble2\n// res149: Boolean = false\nposDouble1 >= posDouble2\n// res150: Boolean = false\nposDouble1 == posDouble2\n// res151: Boolean = false\nposDouble1 < posDouble2\n// res152: Boolean = true\nposDouble1 <= posDouble2\n// res153: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-10",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posDouble123 = PosDouble(123.123d)\n// posDouble123: Type = 123.123\nval posDouble999 = PosDouble(999.999d)\n// posDouble999: Type = 999.999\n\nposDouble123.value\n// res154: Double = 123.123\n\nposDouble999.value\n// res155: Double = 999.999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-10",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosDouble.MinValue\n// res156: Type = 4.9E-324\n\nPosDouble.MaxValue\n// res157: Type = 1.7976931348623157E308\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposdouble-non-positive-double",children:[(0,a.jsx)(e.code,{children:"NonPosDouble"}),": non-positive ",(0,a.jsx)(e.code,{children:"Double"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-11",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosDouble(0d)\n// res158: Type = 0.0\nNonPosDouble(-999.999d)\n// res159: Type = -999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosDouble(0.00001d)\n// error:\n// Invalid value: [1.0E-5d]. It must be a non-positive Double\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosDouble(999.999d)\n// error:\n// Invalid value: [999.999d]. It must be a non-positive Double\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-11",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosDouble = 0d\n// validNonPosDouble: Double = 0.0\nNonPosDouble.from(validNonPosDouble)\n// res160: Either[String, Type] = Right(value = 0.0)\n\nval validNonPosDouble2 = -999.999d\n// validNonPosDouble2: Double = -999.999\nNonPosDouble.from(validNonPosDouble2)\n// res161: Either[String, Type] = Right(value = -999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosDouble1 = 0.00001d\n// invalidNonPosDouble1: Double = 1.0E-5\nNonPosDouble.from(invalidNonPosDouble1)\n// res162: Either[String, Type] = Left(\n//   value = "Invalid value: [1.0E-5]. It must be a non-positive Double"\n// )\n\nval invalidNonPosDouble2 = 999.999d\n// invalidNonPosDouble2: Double = 999.999\nNonPosDouble.from(invalidNonPosDouble2)\n// res163: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a non-positive Double"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-11",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosDouble1 = NonPosDouble(0d)\n// nonPosDouble1: Type = 0.0\nval nonPosDouble2 = NonPosDouble(-0.999d)\n// nonPosDouble2: Type = -0.999\n\nnonPosDouble1 > nonPosDouble2\n// res164: Boolean = true\nnonPosDouble1 >= nonPosDouble2\n// res165: Boolean = true\nnonPosDouble1 == nonPosDouble2\n// res166: Boolean = false\nnonPosDouble1 < nonPosDouble2\n// res167: Boolean = false\nnonPosDouble1 <= nonPosDouble2\n// res168: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-11",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosDouble0 = NonPosDouble(0d)\n// nonPosDouble0: Type = 0.0\nval nonPosDoubleMinus999 = NonPosDouble(-999.999d)\n// nonPosDoubleMinus999: Type = -999.999\n\nnonPosDouble0.value\n// res169: Double = 0.0\n\nnonPosDoubleMinus999.value\n// res170: Double = -999.999\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-11",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosDouble.MinValue\n// res171: Type = -1.7976931348623157E308\n\nNonPosDouble.MaxValue\n// res172: Type = 0.0\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-float",children:["Refined ",(0,a.jsx)(e.code,{children:"Float"})]}),"\n",(0,a.jsxs)(e.h2,{id:"negfloat-negative-float",children:[(0,a.jsx)(e.code,{children:"NegFloat"}),": negative ",(0,a.jsx)(e.code,{children:"Float"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-12",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegFloat(-0.00001f)\n// res173: Type = -1.0E-5F\nNegFloat(-999.999f)\n// res174: Type = -999.999F\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegFloat(0f)\n// error:\n// Invalid value: [0.0f]. It must be a negative Float\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegFloat(999.999f)\n// error:\n// Invalid value: [999.999f]. It must be a negative Float\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-12",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegFloat = -0.00001f \n// validNegFloat: Float = -1.0E-5F\nNegFloat.from(validNegFloat)\n// res175: Either[String, Type] = Right(value = -1.0E-5F)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegFloat1 = 0f \n// invalidNegFloat1: Float = 0.0F\nNegFloat.from(invalidNegFloat1)\n// res176: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a negative Float"\n// )\n\nval invalidNegFloat2 = 999.999f\n// invalidNegFloat2: Float = 999.999F\nNegFloat.from(invalidNegFloat2)\n// res177: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a negative Float"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-12",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negFloat1 = NegFloat(-0.1f)\n// negFloat1: Type = -0.1F\nval negFloat2 = NegFloat(-0.2f)\n// negFloat2: Type = -0.2F\n\nnegFloat1 > negFloat2\n// res178: Boolean = true\nnegFloat1 >= negFloat2\n// res179: Boolean = true\nnegFloat1 == negFloat2\n// res180: Boolean = false\nnegFloat1 < negFloat2\n// res181: Boolean = false\nnegFloat1 <= negFloat2\n// res182: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-12",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negFloat123 = NegFloat(-123.123f)\n// negFloat123: Type = -123.123F\nval negFloat999 = NegFloat(-999.999f)\n// negFloat999: Type = -999.999F\n\nnegFloat123.value\n// res183: Float = -123.123F\n\nnegFloat999.value\n// res184: Float = -999.999F\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-12",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegFloat.MinValue\n// res185: Type = -3.4028235E38F\n\nNegFloat.MaxValue\n// res186: Type = -1.4E-45F\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonnegfloat-non-negative-float",children:[(0,a.jsx)(e.code,{children:"NonNegFloat"}),": non-negative ",(0,a.jsx)(e.code,{children:"Float"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-13",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegFloat(0f)\n// res187: Type = 0.0F\nNonNegFloat(999.999f)\n// res188: Type = 999.999F\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegFloat(-0.00001f)\n// error:\n// Invalid value: [-1.0E-5f]. It must be a non-negative Float\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegFloat(-999.999f)\n// error:\n// Invalid value: [-999.999f]. It must be a non-negative Float\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-13",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegFloat1 = 0f\n// validNonNegFloat1: Float = 0.0F\nNonNegFloat.from(validNonNegFloat1)\n// res189: Either[String, Type] = Right(value = 0.0F)\n\nval validNonNegFloat2 = 999.999f\n// validNonNegFloat2: Float = 999.999F\nNonNegFloat.from(validNonNegFloat2)\n// res190: Either[String, Type] = Right(value = 999.999F)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegFloat1 = -0.00001f\n// invalidNonNegFloat1: Float = -1.0E-5F\nNonNegFloat.from(invalidNonNegFloat1)\n// res191: Either[String, Type] = Left(\n//   value = "Invalid value: [-1.0E-5]. It must be a non-negative Float"\n// )\n\nval invalidNonNegFloat2 = -999.999f\n// invalidNonNegFloat2: Float = -999.999F\nNonNegFloat.from(invalidNonNegFloat2)\n// res192: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a non-negative Float"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-13",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegFloat1 = NonNegFloat(0f)\n// nonNegFloat1: Type = 0.0F\nval nonNegFloat2 = NonNegFloat(0.999f)\n// nonNegFloat2: Type = 0.999F\n\nnonNegFloat1 > nonNegFloat2\n// res193: Boolean = false\nnonNegFloat1 >= nonNegFloat2\n// res194: Boolean = false\nnonNegFloat1 == nonNegFloat2\n// res195: Boolean = false\nnonNegFloat1 < nonNegFloat2\n// res196: Boolean = true\nnonNegFloat1 <= nonNegFloat2\n// res197: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-13",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegFloat123 = NonNegFloat(0f)\n// nonNegFloat123: Type = 0.0F\nval nonNegFloat999 = NonNegFloat(999.999f)\n// nonNegFloat999: Type = 999.999F\n\nnonNegFloat123.value\n// res198: Float = 0.0F\n\nnonNegFloat999.value\n// res199: Float = 999.999F\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-13",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegFloat.MinValue\n// res200: Type = 0.0F\n\nNonNegFloat.MaxValue\n// res201: Type = 3.4028235E38F\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"posfloat-positive-float",children:[(0,a.jsx)(e.code,{children:"PosFloat"}),": positive ",(0,a.jsx)(e.code,{children:"Float"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-14",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosFloat(0.00001f)\n// res202: Type = 1.0E-5F\nPosFloat(999.999f)\n// res203: Type = 999.999F\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosFloat(0f)\n// error:\n// Invalid value: [0.0f]. It must be a positive Float\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosFloat(-999.999f)\n// error:\n// Invalid value: [-999.999f]. It must be a positive Float\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-14",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosFloat1 = 0.00001f\n// validPosFloat1: Float = 1.0E-5F\nPosFloat.from(validPosFloat1)\n// res204: Either[String, Type] = Right(value = 1.0E-5F)\n\nval validPosFloat2 = 999.999f\n// validPosFloat2: Float = 999.999F\nPosFloat.from(validPosFloat2)\n// res205: Either[String, Type] = Right(value = 999.999F)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosFloat1 = 0f\n// invalidPosFloat1: Float = 0.0F\nPosFloat.from(invalidPosFloat1)\n// res206: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a positive Float"\n// )\n\nval invalidPosFloat2 = -999.999f\n// invalidPosFloat2: Float = -999.999F\nPosFloat.from(invalidPosFloat2)\n// res207: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a positive Float"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-14",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posFloat1 = PosFloat(0.00001f)\n// posFloat1: Type = 1.0E-5F\nval posFloat2 = PosFloat(0.999f)\n// posFloat2: Type = 0.999F\n\nposFloat1 > posFloat2\n// res208: Boolean = false\nposFloat1 >= posFloat2\n// res209: Boolean = false\nposFloat1 == posFloat2\n// res210: Boolean = false\nposFloat1 < posFloat2\n// res211: Boolean = true\nposFloat1 <= posFloat2\n// res212: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-14",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posFloat123 = PosFloat(123.123f)\n// posFloat123: Type = 123.123F\nval posFloat999 = PosFloat(999.999f)\n// posFloat999: Type = 999.999F\n\nposFloat123.value\n// res213: Float = 123.123F\n\nposFloat999.value\n// res214: Float = 999.999F\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-14",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosFloat.MinValue\n// res215: Type = 1.4E-45F\n\nPosFloat.MaxValue\n// res216: Type = 3.4028235E38F\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposfloat-non-positive-float",children:[(0,a.jsx)(e.code,{children:"NonPosFloat"}),": non-positive ",(0,a.jsx)(e.code,{children:"Float"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-15",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosFloat(0f)\n// res217: Type = 0.0F\nNonPosFloat(-999.999f)\n// res218: Type = -999.999F\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosFloat(0.00001f)\n// error:\n// Invalid value: [1.0E-5f]. It must be a non-positive Float\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosFloat(999.999f)\n// error:\n// Invalid value: [999.999f]. It must be a non-positive Float\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-15",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosFloat = 0f\n// validNonPosFloat: Float = 0.0F\nNonPosFloat.from(validNonPosFloat)\n// res219: Either[String, Type] = Right(value = 0.0F)\n\nval validNonPosFloat2 = -999.999f\n// validNonPosFloat2: Float = -999.999F\nNonPosFloat.from(validNonPosFloat2)\n// res220: Either[String, Type] = Right(value = -999.999F)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosFloat1 = 0.00001f\n// invalidNonPosFloat1: Float = 1.0E-5F\nNonPosFloat.from(invalidNonPosFloat1)\n// res221: Either[String, Type] = Left(\n//   value = "Invalid value: [1.0E-5]. It must be a non-positive Float"\n// )\n\nval invalidNonPosFloat2 = 999.999f\n// invalidNonPosFloat2: Float = 999.999F\nNonPosFloat.from(invalidNonPosFloat2)\n// res222: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a non-positive Float"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-15",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosFloat1 = NonPosFloat(0f)\n// nonPosFloat1: Type = 0.0F\nval nonPosFloat2 = NonPosFloat(-0.999f)\n// nonPosFloat2: Type = -0.999F\n\nnonPosFloat1 > nonPosFloat2\n// res223: Boolean = true\nnonPosFloat1 >= nonPosFloat2\n// res224: Boolean = true\nnonPosFloat1 == nonPosFloat2\n// res225: Boolean = false\nnonPosFloat1 < nonPosFloat2\n// res226: Boolean = false\nnonPosFloat1 <= nonPosFloat2\n// res227: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-15",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosFloat0 = NonPosFloat(0f)\n// nonPosFloat0: Type = 0.0F\nval nonPosFloatMinus999 = NonPosFloat(-999.999f)\n// nonPosFloatMinus999: Type = -999.999F\n\nnonPosFloat0.value\n// res228: Float = 0.0F\n\nnonPosFloatMinus999.value\n// res229: Float = -999.999F\n"})}),"\n",(0,a.jsx)(e.h3,{id:"min-and-max-values-15",children:"Min and Max Values"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosFloat.MinValue\n// res230: Type = -3.4028235E38F\n\nNonPosFloat.MaxValue\n// res231: Type = 0.0F\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-bigint",children:["Refined ",(0,a.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,a.jsxs)(e.h2,{id:"negbigint-negative-bigint",children:[(0,a.jsx)(e.code,{children:"NegBigInt"}),": negative ",(0,a.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-16",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigInt(-1)\n// res232: Type = -1\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigInt(0)\n// error:\n// Invalid value: [BigInt.apply(0)]. It must be a negative BigInt\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigInt(1)\n// error:\n// Invalid value: [BigInt.apply(1)]. It must be a negative BigInt\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-16",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegBigInt = -1 \n// validNegBigInt: Int = -1\nNegBigInt.from(validNegBigInt)\n// res233: Either[String, Type] = Right(value = -1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegBigInt1 = 0 \n// invalidNegBigInt1: Int = 0\nNegBigInt.from(invalidNegBigInt1)\n// res234: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative BigInt"\n// )\n\nval invalidNegBigInt2 = 1\n// invalidNegBigInt2: Int = 1\nNegBigInt.from(invalidNegBigInt2)\n// res235: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative BigInt"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-16",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negBigInt1 = NegBigInt(-1)\n// negBigInt1: Type = -1\nval negBigInt2 = NegBigInt(-2)\n// negBigInt2: Type = -2\n\nnegBigInt1 > negBigInt2\n// res236: Boolean = true\nnegBigInt1 >= negBigInt2\n// res237: Boolean = true\nnegBigInt1 == negBigInt2\n// res238: Boolean = false\nnegBigInt1 < negBigInt2\n// res239: Boolean = false\nnegBigInt1 <= negBigInt2\n// res240: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-16",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negBigInt123 = NegBigInt(-123)\n// negBigInt123: Type = -123\nval negBigInt999 = NegBigInt(-999)\n// negBigInt999: Type = -999\n\nnegBigInt123.value\n// res241: BigInt = -123\n\nnegBigInt999.value\n// res242: BigInt = -999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonnegbigint-non-negative-bigint",children:[(0,a.jsx)(e.code,{children:"NonNegBigInt"}),": non-negative ",(0,a.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-17",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegBigInt(0)\n// res243: Type = 0\nNonNegBigInt(1)\n// res244: Type = 1\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegBigInt(-2)\n// error:\n// Invalid value: [BigInt.apply(-2)]. It must be a non-negative BigInt\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-17",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegBigInt = 1 \n// validNonNegBigInt: Int = 1\nNonNegBigInt.from(validNonNegBigInt)\n// res245: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegBigInt1 = -1\n// invalidNonNegBigInt1: Int = -1\nNonNegBigInt.from(invalidNonNegBigInt1)\n// res246: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative BigInt"\n// )\n\nval invalidNonNegBigInt2 = -999\n// invalidNonNegBigInt2: Int = -999\nNonNegBigInt.from(invalidNonNegBigInt2)\n// res247: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative BigInt"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-17",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegBigInt1 = NonNegBigInt(0)\n// nonNegBigInt1: Type = 0\nval nonNegBigInt2 = NonNegBigInt(999)\n// nonNegBigInt2: Type = 999\n\nnonNegBigInt1 > nonNegBigInt2\n// res248: Boolean = false\nnonNegBigInt1 >= nonNegBigInt2\n// res249: Boolean = false\nnonNegBigInt1 == nonNegBigInt2\n// res250: Boolean = false\nnonNegBigInt1 < nonNegBigInt2\n// res251: Boolean = true\nnonNegBigInt1 <= nonNegBigInt2\n// res252: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-17",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegBigInt123 = NonNegBigInt(0)\n// nonNegBigInt123: Type = 0\nval nonNegBigInt999 = NonNegBigInt(999)\n// nonNegBigInt999: Type = 999\n\nnonNegBigInt123.value\n// res253: BigInt = 0\n\nnonNegBigInt999.value\n// res254: BigInt = 999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"posbigint-positive-bigint",children:[(0,a.jsx)(e.code,{children:"PosBigInt"}),": positive ",(0,a.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-18",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigInt(1)\n// res255: Type = 1\nPosBigInt(999)\n// res256: Type = 999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigInt(0)\n// error:\n// Invalid value: [BigInt.apply(0)]. It must be a positive BigInt\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigInt(-2)\n// error:\n// Invalid value: [BigInt.apply(-2)]. It must be a positive BigInt\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-18",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosBigInt = 1\n// validPosBigInt: Int = 1\nPosBigInt.from(validPosBigInt)\n// res257: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosBigInt1 = 0\n// invalidPosBigInt1: Int = 0\nPosBigInt.from(invalidPosBigInt1)\n// res258: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive BigInt"\n// )\n\nval invalidPosBigInt2 = -999\n// invalidPosBigInt2: Int = -999\nPosBigInt.from(invalidPosBigInt2)\n// res259: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive BigInt"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-18",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posBigInt1 = PosBigInt(1)\n// posBigInt1: Type = 1\nval posBigInt2 = PosBigInt(999)\n// posBigInt2: Type = 999\n\nposBigInt1 > posBigInt2\n// res260: Boolean = false\nposBigInt1 >= posBigInt2\n// res261: Boolean = false\nposBigInt1 == posBigInt2\n// res262: Boolean = false\nposBigInt1 < posBigInt2\n// res263: Boolean = true\nposBigInt1 <= posBigInt2\n// res264: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-18",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posBigInt123 = PosBigInt(123)\n// posBigInt123: Type = 123\nval posBigInt999 = PosBigInt(999)\n// posBigInt999: Type = 999\n\nposBigInt123.value\n// res265: BigInt = 123\n\nposBigInt999.value\n// res266: BigInt = 999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposbigint-non-positive-bigint",children:[(0,a.jsx)(e.code,{children:"NonPosBigInt"}),": non-positive ",(0,a.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-19",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosBigInt(0)\n// res267: Type = 0\nNonPosBigInt(-999)\n// res268: Type = -999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosBigInt(1)\n// error:\n// Invalid value: [BigInt.apply(1)]. It must be a non-positive BigInt\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-19",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosBigInt = 0\n// validNonPosBigInt: Int = 0\nNonPosBigInt.from(validNonPosBigInt)\n// res269: Either[String, Type] = Right(value = 0)\n\nval validNonPosBigInt2 = -999\n// validNonPosBigInt2: Int = -999\nNonPosBigInt.from(validNonPosBigInt2)\n// res270: Either[String, Type] = Right(value = -999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosBigInt1 = 1\n// invalidNonPosBigInt1: Int = 1\nNonPosBigInt.from(invalidNonPosBigInt1)\n// res271: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive BigInt"\n// )\n\nval invalidNonPosBigInt2 = 999\n// invalidNonPosBigInt2: Int = 999\nNonPosBigInt.from(invalidNonPosBigInt2)\n// res272: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive BigInt"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-19",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosBigInt1 = NonPosBigInt(0)\n// nonPosBigInt1: Type = 0\nval nonPosBigInt2 = NonPosBigInt(-999)\n// nonPosBigInt2: Type = -999\n\nnonPosBigInt1 > nonPosBigInt2\n// res273: Boolean = true\nnonPosBigInt1 >= nonPosBigInt2\n// res274: Boolean = true\nnonPosBigInt1 == nonPosBigInt2\n// res275: Boolean = false\nnonPosBigInt1 < nonPosBigInt2\n// res276: Boolean = false\nnonPosBigInt1 <= nonPosBigInt2\n// res277: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-19",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosBigInt0 = NonPosBigInt(0)\n// nonPosBigInt0: Type = 0\nval nonPosBigIntMinus999 = NonPosBigInt(-999)\n// nonPosBigIntMinus999: Type = -999\n\nnonPosBigInt0.value\n// res278: BigInt = 0\n\nnonPosBigIntMinus999.value\n// res279: BigInt = -999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-bigdecimal",children:["Refined ",(0,a.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,a.jsxs)(e.h2,{id:"negbigdecimal-negative-bigdecimal",children:[(0,a.jsx)(e.code,{children:"NegBigDecimal"}),": negative ",(0,a.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-20",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigDecimal(-0.00001d)\n// res280: Type = -0.000010\nNegBigDecimal(-999.999d)\n// res281: Type = -999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigDecimal(0d)\n// error:\n// Invalid value: [BigDecimal.apply(0.0d)]. It must be a negative BigDecimal\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NegBigDecimal(999.999d)\n// error:\n// Invalid value: [BigDecimal.apply(999.999d)]. It must be a negative BigDecimal\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-20",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNegBigDecimal = -0.00001d \n// validNegBigDecimal: Double = -1.0E-5\nNegBigDecimal.from(validNegBigDecimal)\n// res282: Either[String, Type] = Right(value = -0.000010)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNegBigDecimal1 = 0d \n// invalidNegBigDecimal1: Double = 0.0\nNegBigDecimal.from(invalidNegBigDecimal1)\n// res283: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a negative BigDecimal"\n// )\n\nval invalidNegBigDecimal2 = 999.999d\n// invalidNegBigDecimal2: Double = 999.999\nNegBigDecimal.from(invalidNegBigDecimal2)\n// res284: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a negative BigDecimal"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-20",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negBigDecimal1 = NegBigDecimal(-0.1d)\n// negBigDecimal1: Type = -0.1\nval negBigDecimal2 = NegBigDecimal(-0.2d)\n// negBigDecimal2: Type = -0.2\n\nnegBigDecimal1 > negBigDecimal2\n// res285: Boolean = true\nnegBigDecimal1 >= negBigDecimal2\n// res286: Boolean = true\nnegBigDecimal1 == negBigDecimal2\n// res287: Boolean = false\nnegBigDecimal1 < negBigDecimal2\n// res288: Boolean = false\nnegBigDecimal1 <= negBigDecimal2\n// res289: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-20",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val negBigDecimal123 = NegBigDecimal(-123.123d)\n// negBigDecimal123: Type = -123.123\nval negBigDecimal999 = NegBigDecimal(-999.999d)\n// negBigDecimal999: Type = -999.999\n\nnegBigDecimal123.value\n// res290: BigDecimal = -123.123\n\nnegBigDecimal999.value\n// res291: BigDecimal = -999.999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonnegbigdecimal-non-negative-bigdecimal",children:[(0,a.jsx)(e.code,{children:"NonNegBigDecimal"}),": non-negative ",(0,a.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-21",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegBigDecimal(0d)\n// res292: Type = 0.0\nNonNegBigDecimal(999.999d)\n// res293: Type = 999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegBigDecimal(-0.00001d)\n// error:\n// Invalid value: [BigDecimal.apply(-1.0E-5d)]. It must be a non-negative BigDecimal\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonNegBigDecimal(-999.999d)\n// error:\n// Invalid value: [BigDecimal.apply(-999.999d)]. It must be a non-negative BigDecimal\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-21",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonNegBigDecimal1 = 0d\n// validNonNegBigDecimal1: Double = 0.0\nNonNegBigDecimal.from(validNonNegBigDecimal1)\n// res294: Either[String, Type] = Right(value = 0.0)\n\nval validNonNegBigDecimal2 = 999.999d\n// validNonNegBigDecimal2: Double = 999.999\nNonNegBigDecimal.from(validNonNegBigDecimal2)\n// res295: Either[String, Type] = Right(value = 999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegBigDecimal1 = -0.00001d\n// invalidNonNegBigDecimal1: Double = -1.0E-5\nNonNegBigDecimal.from(invalidNonNegBigDecimal1)\n// res296: Either[String, Type] = Left(\n//   value = "Invalid value: [-0.000010]. It must be a non-negative BigDecimal"\n// )\n\nval invalidNonNegBigDecimal2 = -999.999d\n// invalidNonNegBigDecimal2: Double = -999.999\nNonNegBigDecimal.from(invalidNonNegBigDecimal2)\n// res297: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a non-negative BigDecimal"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-21",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegBigDecimal1 = NonNegBigDecimal(0d)\n// nonNegBigDecimal1: Type = 0.0\nval nonNegBigDecimal2 = NonNegBigDecimal(0.999d)\n// nonNegBigDecimal2: Type = 0.999\n\nnonNegBigDecimal1 > nonNegBigDecimal2\n// res298: Boolean = false\nnonNegBigDecimal1 >= nonNegBigDecimal2\n// res299: Boolean = false\nnonNegBigDecimal1 == nonNegBigDecimal2\n// res300: Boolean = false\nnonNegBigDecimal1 < nonNegBigDecimal2\n// res301: Boolean = true\nnonNegBigDecimal1 <= nonNegBigDecimal2\n// res302: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-21",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonNegBigDecimal123 = NonNegBigDecimal(0d)\n// nonNegBigDecimal123: Type = 0.0\nval nonNegBigDecimal999 = NonNegBigDecimal(999.999d)\n// nonNegBigDecimal999: Type = 999.999\n\nnonNegBigDecimal123.value\n// res303: BigDecimal = 0.0\n\nnonNegBigDecimal999.value\n// res304: BigDecimal = 999.999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"posbigdecimal-positive-bigdecimal",children:[(0,a.jsx)(e.code,{children:"PosBigDecimal"}),": positive ",(0,a.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-22",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigDecimal(0.00001d)\n// res305: Type = 0.000010\nPosBigDecimal(999.999d)\n// res306: Type = 999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigDecimal(0d)\n// error:\n// Invalid value: [BigDecimal.apply(0.0d)]. It must be a positive BigDecimal\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"PosBigDecimal(-999.999d)\n// error:\n// Invalid value: [BigDecimal.apply(-999.999d)]. It must be a positive BigDecimal\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-22",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validPosBigDecimal1 = 0.00001d\n// validPosBigDecimal1: Double = 1.0E-5\nPosBigDecimal.from(validPosBigDecimal1)\n// res307: Either[String, Type] = Right(value = 0.000010)\n\nval validPosBigDecimal2 = 999.999d\n// validPosBigDecimal2: Double = 999.999\nPosBigDecimal.from(validPosBigDecimal2)\n// res308: Either[String, Type] = Right(value = 999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidPosBigDecimal1 = 0d\n// invalidPosBigDecimal1: Double = 0.0\nPosBigDecimal.from(invalidPosBigDecimal1)\n// res309: Either[String, Type] = Left(\n//   value = "Invalid value: [0.0]. It must be a positive BigDecimal"\n// )\n\nval invalidPosBigDecimal2 = -999.999d\n// invalidPosBigDecimal2: Double = -999.999\nPosBigDecimal.from(invalidPosBigDecimal2)\n// res310: Either[String, Type] = Left(\n//   value = "Invalid value: [-999.999]. It must be a positive BigDecimal"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-22",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posBigDecimal1 = PosBigDecimal(0.00001d)\n// posBigDecimal1: Type = 0.000010\nval posBigDecimal2 = PosBigDecimal(0.999d)\n// posBigDecimal2: Type = 0.999\n\nposBigDecimal1 > posBigDecimal2\n// res311: Boolean = false\nposBigDecimal1 >= posBigDecimal2\n// res312: Boolean = false\nposBigDecimal1 == posBigDecimal2\n// res313: Boolean = false\nposBigDecimal1 < posBigDecimal2\n// res314: Boolean = true\nposBigDecimal1 <= posBigDecimal2\n// res315: Boolean = true\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-22",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val posBigDecimal123 = PosBigDecimal(123.123d)\n// posBigDecimal123: Type = 123.123\nval posBigDecimal999 = PosBigDecimal(999.999d)\n// posBigDecimal999: Type = 999.999\n\nposBigDecimal123.value\n// res316: BigDecimal = 123.123\n\nposBigDecimal999.value\n// res317: BigDecimal = 999.999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"nonposbigdecimal-non-positive-bigdecimal",children:[(0,a.jsx)(e.code,{children:"NonPosBigDecimal"}),": non-positive ",(0,a.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-23",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosBigDecimal(0d)\n// res318: Type = 0.0\nNonPosBigDecimal(-999.999d)\n// res319: Type = -999.999\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosBigDecimal(0.00001d)\n// error:\n// Invalid value: [BigDecimal.apply(1.0E-5d)]. It must be a non-positive BigDecimal\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"NonPosBigDecimal(999.999d)\n// error:\n// Invalid value: [BigDecimal.apply(999.999d)]. It must be a non-positive BigDecimal\n"})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-23",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val validNonPosBigDecimal = 0d\n// validNonPosBigDecimal: Double = 0.0\nNonPosBigDecimal.from(validNonPosBigDecimal)\n// res320: Either[String, Type] = Right(value = 0.0)\n\nval validNonPosBigDecimal2 = -999.999d\n// validNonPosBigDecimal2: Double = -999.999\nNonPosBigDecimal.from(validNonPosBigDecimal2)\n// res321: Either[String, Type] = Right(value = -999.999)\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosBigDecimal1 = 0.00001d\n// invalidNonPosBigDecimal1: Double = 1.0E-5\nNonPosBigDecimal.from(invalidNonPosBigDecimal1)\n// res322: Either[String, Type] = Left(\n//   value = "Invalid value: [0.000010]. It must be a non-positive BigDecimal"\n// )\n\nval invalidNonPosBigDecimal2 = 999.999d\n// invalidNonPosBigDecimal2: Double = 999.999\nNonPosBigDecimal.from(invalidNonPosBigDecimal2)\n// res323: Either[String, Type] = Left(\n//   value = "Invalid value: [999.999]. It must be a non-positive BigDecimal"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"comparison-23",children:"Comparison"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosBigDecimal1 = NonPosBigDecimal(0d)\n// nonPosBigDecimal1: Type = 0.0\nval nonPosBigDecimal2 = NonPosBigDecimal(-0.999d)\n// nonPosBigDecimal2: Type = -0.999\n\nnonPosBigDecimal1 > nonPosBigDecimal2\n// res324: Boolean = true\nnonPosBigDecimal1 >= nonPosBigDecimal2\n// res325: Boolean = true\nnonPosBigDecimal1 == nonPosBigDecimal2\n// res326: Boolean = false\nnonPosBigDecimal1 < nonPosBigDecimal2\n// res327: Boolean = false\nnonPosBigDecimal1 <= nonPosBigDecimal2\n// res328: Boolean = false\n"})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-23",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"val nonPosBigDecimal0 = NonPosBigDecimal(0d)\n// nonPosBigDecimal0: Type = 0.0\nval nonPosBigDecimalMinus999 = NonPosBigDecimal(-999.999d)\n// nonPosBigDecimalMinus999: Type = -999.999\n\nnonPosBigDecimal0.value\n// res329: BigDecimal = 0.0\n\nnonPosBigDecimalMinus999.value\n// res330: BigDecimal = -999.999\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-nonemptystring",children:["Refined ",(0,a.jsx)(e.code,{children:"NonEmptyString"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-24",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'NonEmptyString("blah")\n// res331: Type = "blah"\nNonEmptyString("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")\n// res332: Type = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'NonEmptyString("")\n// error:\n// Invalid value: [""]. It must be a non-empty String\n'})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-24",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val validNonEmptyString1 = "blah" \n// validNonEmptyString1: String = "blah"\nNonEmptyString.from(validNonEmptyString1)\n// res333: Either[String, Type] = Right(value = "blah")\n\nval validNonEmptyString2 = "Lorem Ipsum is simply dummy text of the printing and typesetting industry." \n// validNonEmptyString2: String = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\nNonEmptyString.from(validNonEmptyString2)\n// res334: Either[String, Type] = Right(\n//   value = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n// )\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonEmptyString = "" \n// invalidNonEmptyString: String = ""\nNonEmptyString.from(invalidNonEmptyString)\n// res335: Either[String, Type] = Left(\n//   value = "Invalid value: []. It must be a non-empty String"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"concatenation",children:"Concatenation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val nonEmptyString1 = NonEmptyString("Hello")\n// nonEmptyString1: Type = "Hello"\nval nonEmptyString2 = NonEmptyString(" World")\n// nonEmptyString2: Type = " World"\n\nnonEmptyString1 ++ nonEmptyString2\n// res336: Type = "Hello World"\n'})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-24",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val nonEmptyStringA = NonEmptyString("blah")\n// nonEmptyStringA: Type = "blah"\nval nonEmptyStringB = NonEmptyString("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")\n// nonEmptyStringB: Type = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n\nnonEmptyStringA.value\n// res337: String = "blah"\n\nnonEmptyStringB.value\n// res338: String = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-nonblankstring",children:["Refined ",(0,a.jsx)(e.code,{children:"NonBlankString"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-25",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'NonBlankString("blah")\n// res339: Type = "blah"\nNonBlankString("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")\n// res340: Type = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'// error:\n// NonBlankString("")\n// ^^^^^^^^^^^^^^^^^^\n// Invalid value: [""]. It must be not all whitespace non-empty String\n\nNonBlankString(" ")\n// error:\n// NonBlankString(" ")\n// ^^^^^^^^^^^^^^^^^^^\n// Invalid value: [" "]. It must be not all whitespace non-empty String\n\nNonBlankString(" \\t \\n \\r")\n// error:\n// NonBlankString(" \\t \\n \\r")\n// ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n// Invalid value: [" \\t \\n \\r"]. It must be not all whitespace non-empty String\n'})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-25",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val validNonBlankString1 = "blah"\n// validNonBlankString1: String = "blah"\nNonBlankString.from(validNonBlankString1)\n// res341: Either[String, Type] = Right(value = "blah")\n\nval validNonBlankString2 = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n// validNonBlankString2: String = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\nNonBlankString.from(validNonBlankString2)\n// res342: Either[String, Type] = Right(\n//   value = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n// )\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidNonBlankString1 = ""\n// invalidNonBlankString1: String = ""\nNonBlankString.from(invalidNonBlankString1)\n// res343: Either[String, Type] = Left(\n//   value = "Invalid value: [], unicode=[]. It must be not all whitespace non-empty String"\n// )\n\nval invalidNonBlankString2 = " "\n// invalidNonBlankString2: String = " "\nNonBlankString.from(invalidNonBlankString2)\n// res344: Either[String, Type] = Left(\n//   value = "Invalid value: [ ], unicode=[\\\\u0020]. It must be not all whitespace non-empty String"\n// )\n\nval invalidNonBlankString3 = " \\t \\n \\r"\n// invalidNonBlankString3: String = """ \t \n//  \r"""\nNonBlankString.from(invalidNonBlankString3)\n// res345: Either[String, Type] = Left(\n//   value = """Invalid value: [ \t \n//  \r], unicode=[\\u0020\\u0009\\u0020\\u000a\\u0020\\u000d]. It must be not all whitespace non-empty String"""\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"concatenation-1",children:"Concatenation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val nonBlankString1 = NonBlankString("Hello")\n// nonBlankString1: Type = "Hello"\nval nonBlankString2 = NonBlankString(" World")\n// nonBlankString2: Type = " World"\n\nnonBlankString1 ++ nonBlankString2\n// res346: Type = "Hello World"\n\nnonBlankString1.appendString("      ")\n// res347: Type = "Hello      "\n\nnonBlankString1.prependString("      ")\n// res348: Type = "      Hello"\n'})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-25",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val nonBlankStringA = NonBlankString("blah")\n// nonBlankStringA: Type = "blah"\nval nonBlankStringB = NonBlankString("Lorem Ipsum is simply dummy text of the printing and typesetting industry.")\n// nonBlankStringB: Type = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n\nnonBlankStringA.value\n// res349: String = "blah"\n\nnonBlankStringB.value\n// res350: String = "Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-uuid",children:["Refined ",(0,a.jsx)(e.code,{children:"Uuid"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-26",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'import refined4s.types.all.*\nUuid("3596f062-a6bd-4d2c-978e-3ed6f97a264b")\n// res352: Type = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\n\nval uuid1 = java.util.UUID.randomUUID()\n// uuid1: UUID = 6bcb8b3e-bd4c-4c77-9bd0-bcbc3bff7c3a\nUuid(uuid1)\n// res353: Type = "6bcb8b3e-bd4c-4c77-9bd0-bcbc3bff7c3a"\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'Uuid("")\n// error:\n// Invalid value: [""]. It must be UUID\n\nUuid("blah")\n// error:\n// Invalid value: ["blah"]. It must be UUID\n'})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-26",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val validUuidString = "3596f062-a6bd-4d2c-978e-3ed6f97a264b" \n// validUuidString: String = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\nUuid.from(validUuidString)\n// res354: Either[String, Type] = Right(\n//   value = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\n// )\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidUuid = "iuhsfd9f-f32wfwf3-d1i2j" \n// invalidUuid: String = "iuhsfd9f-f32wfwf3-d1i2j"\nUuid.from(invalidUuid)\n// res355: Either[String, Type] = Left(\n//   value = "Invalid value: [iuhsfd9f-f32wfwf3-d1i2j]. It must be UUID"\n// )\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"to-javautiluuid",children:["To ",(0,a.jsx)(e.code,{children:"java.util.UUID"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val uuid2 = Uuid("3596f062-a6bd-4d2c-978e-3ed6f97a264b")\n// uuid2: Type = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\n\nuuid2.toUUID\n// res356: UUID = 3596f062-a6bd-4d2c-978e-3ed6f97a264b\n'})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-26",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val uuid3 = Uuid("3596f062-a6bd-4d2c-978e-3ed6f97a264b")\n// uuid3: Type = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\n\nuuid3.value\n// res357: String = "3596f062-a6bd-4d2c-978e-3ed6f97a264b"\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)(e.h2,{id:"refined-uri",children:["Refined ",(0,a.jsx)(e.code,{children:"Uri"})]}),"\n",(0,a.jsx)(e.h3,{id:"compile-time-validation-27",children:"Compile-time Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'Uri("https://www.google.com")\n// res358: Type = "https://www.google.com"\nUri("https://github.com/kevin-lee")\n// res359: Type = "https://github.com/kevin-lee"\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'Uri("%^<>[]`{}")\n// error:\n// Invalid value: ["%^<>[]`{}"]. It must be a URI String\n'})}),"\n",(0,a.jsx)(e.h3,{id:"runtime-validation-27",children:"Runtime Validation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val validUri1 = "https://www.google.com" \n// validUri1: String = "https://www.google.com"\nUri.from(validUri1)\n// res360: Either[String, Type] = Right(value = "https://www.google.com")\n\nval validUri2 = "https://github.com/kevin-lee" \n// validUri2: String = "https://github.com/kevin-lee"\nUri.from(validUri2)\n// res361: Either[String, Type] = Right(value = "https://github.com/kevin-lee")\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val invalidUri = "%^<>[]`{}" \n// invalidUri: String = "%^<>[]`{}"\nUri.from(invalidUri)\n// res362: Either[String, Type] = Left(\n//   value = "Invalid value: [%^<>[]`{}]. It must be a URI String"\n// )\n'})}),"\n",(0,a.jsx)(e.h3,{id:"get-value-27",children:"Get Value"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:'val uriA = Uri("https://www.google.com")\n// uriA: Type = "https://www.google.com"\nval uriB = Uri("https://github.com/kevin-lee")\n// uriB: Type = "https://github.com/kevin-lee"\n\nuriA.value\n// res363: String = "https://www.google.com"\n\nuriB.value\n// res364: String = "https://github.com/kevin-lee"\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"convert-to-javaneturi",children:["Convert to ",(0,a.jsx)(e.code,{children:"java.net.URI"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-scala",children:"uriA.toURI\n// res365: URI = https://www.google.com\n\nuriB.toURI\n// res366: URI = https://github.com/kevin-lee\n"})})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(g,{...n})}):g(n)}},8453:(n,e,l)=>{l.d(e,{R:()=>s,x:()=>t});var a=l(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);