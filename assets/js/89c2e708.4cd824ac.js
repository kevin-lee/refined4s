"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29],{1980:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/newtype-refined/newtype-refined","title":"Newtype + Refined","description":"Create with syntax","source":"@site/../generated-docs/docs/core/newtype-refined/newtype-refined.md","sourceDirName":"core/newtype-refined","slug":"/core/newtype-refined/","permalink":"/docs/core/newtype-refined/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"newtype-refined","title":"Newtype + Refined"},"sidebar":"docsSidebar","previous":{"title":"Custom Type","permalink":"/docs/core/refined/custom-type"},"next":{"title":"refined4-cats","permalink":"/docs/cats/"}}');var i=a(4848),l=a(8453);const r={sidebar_position:1,id:"newtype-refined",title:"Newtype + Refined"},d=void 0,s={},c=[{value:"Create with <code>syntax</code>",id:"create-with-syntax",level:2},{value:"Import <code>syntax</code>",id:"import-syntax",level:3},{value:"refinedNewtype (<code>Either[String, ?]</code>)",id:"refinednewtype-eitherstring-",level:3},{value:"Create with <code>cats.syntax</code>",id:"create-with-catssyntax",level:2},{value:"Import <code>cats.syntax</code>",id:"import-catssyntax",level:3},{value:"refinedNewtypeNec (<code>EitherNec[String, ?]</code>)",id:"refinednewtypenec-eithernecstring-",level:3},{value:"refinedNewtypeNel (<code>EitherNel[String, ?]</code>)",id:"refinednewtypenel-eithernelstring-",level:3},{value:"validateAs (<code>Validated[String, ?]</code>)",id:"validateas-validatedstring-",level:3},{value:"validateNecAs (<code>ValidatedNec[String, ?]</code>)",id:"validatenecas-validatednecstring-",level:3},{value:"validateNelAs (<code>ValidatedNel[String, ?]</code>)",id:"validatenelas-validatednelstring-",level:3}];function o(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"create-with-syntax",children:["Create with ",(0,i.jsx)(n.code,{children:"syntax"})]}),"\n",(0,i.jsxs)(n.h3,{id:"import-syntax",children:["Import ",(0,i.jsx)(n.code,{children:"syntax"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.syntax.*\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"refinednewtype-eitherstring-",children:["refinedNewtype (",(0,i.jsx)(n.code,{children:"Either[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.*\nimport refined4s.types.all.*\n\ntype Name = Name.Type\nobject Name extends Newtype[NonEmptyString]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".refinedNewtype[Name]\n// res1: Either[String, Name] = Right(value = "Carol Danvers")\n\nval name = "Kal-El"\n// name: String = "Kal-El"\nname.refinedNewtype[Name]\n// res2: Either[String, Name] = Right(value = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".refinedNewtype[Name]\n// res3: Either[String, Name] = Left(\n//   value = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n// )\n\nval invalidName = ""\n// invalidName: String = ""\ninvalidName.refinedNewtype[Name]\n// res4: Either[String, Name] = Left(\n//   value = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n// )\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"create-with-catssyntax",children:["Create with ",(0,i.jsx)(n.code,{children:"cats.syntax"})]}),"\n",(0,i.jsxs)(n.h3,{id:"import-catssyntax",children:["Import ",(0,i.jsx)(n.code,{children:"cats.syntax"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.cats.syntax.*\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"refinednewtypenec-eithernecstring-",children:["refinedNewtypeNec (",(0,i.jsx)(n.code,{children:"EitherNec[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".refinedNewtypeNec[Name]\n// res5: Either[Type[String], Name] = Right(value = "Carol Danvers")\n\nval name2 = "Kal-El"\n// name2: String = "Kal-El"\nname2.refinedNewtypeNec[Name]\n// res6: Either[Type[String], Name] = Right(value = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".refinedNewtypeNec[Name]\n// res7: Either[Type[String], Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n//   )\n// )\n\nval invalidName2 = ""\n// invalidName2: String = ""\ninvalidName2.refinedNewtypeNec[Name]\n// res8: Either[Type[String], Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n//   )\n// )\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"refinednewtypenel-eithernelstring-",children:["refinedNewtypeNel (",(0,i.jsx)(n.code,{children:"EitherNel[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".refinedNewtypeNel[Name]\n// res9: Either[NonEmptyList[String], Name] = Right(value = "Carol Danvers")\n\nval name3 = "Kal-El"\n// name3: String = "Kal-El"\nname3.refinedNewtypeNel[Name]\n// res10: Either[NonEmptyList[String], Name] = Right(value = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".refinedNewtypeNel[Name]\n// res11: Either[NonEmptyList[String], Name] = Left(\n//   value = NonEmptyList(\n//     head = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String",\n//     tail = List()\n//   )\n// )\n\nval invalidName3 = ""\n// invalidName3: String = ""\ninvalidName3.refinedNewtypeNel[Name]\n// res12: Either[NonEmptyList[String], Name] = Left(\n//   value = NonEmptyList(\n//     head = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String",\n//     tail = List()\n//   )\n// )\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"validateas-validatedstring-",children:["validateAs (",(0,i.jsx)(n.code,{children:"Validated[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".validateAs[Name]\n// res13: Validated[String, Name] = Valid(a = "Carol Danvers")\n\nval name4 = "Kal-El"\n// name4: String = "Kal-El"\nname4.validateAs[Name]\n// res14: Validated[String, Name] = Valid(a = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".validateAs[Name]\n// res15: Validated[String, Name] = Invalid(\n//   e = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n// )\n\nval invalidName4 = ""\n// invalidName4: String = ""\ninvalidName4.validateAs[Name]\n// res16: Validated[String, Name] = Invalid(\n//   e = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n// )\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"validatenecas-validatednecstring-",children:["validateNecAs (",(0,i.jsx)(n.code,{children:"ValidatedNec[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".validateNecAs[Name]\n// res17: Validated[Type[String], Name] = Valid(a = "Carol Danvers")\n\nval name5 = "Kal-El"\n// name5: String = "Kal-El"\nname5.validateNecAs[Name]\n// res18: Validated[Type[String], Name] = Valid(a = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".validateNecAs[Name]\n// res19: Validated[Type[String], Name] = Invalid(\n//   e = Singleton(\n//     a = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n//   )\n// )\n\nval invalidName5 = ""\n// invalidName5: String = ""\ninvalidName5.validateNecAs[Name]\n// res20: Validated[Type[String], Name] = Invalid(\n//   e = Singleton(\n//     a = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String"\n//   )\n// )\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"validatenelas-validatednelstring-",children:["validateNelAs (",(0,i.jsx)(n.code,{children:"ValidatedNel[String, ?]"}),")"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"Carol Danvers".validateNelAs[Name]\n// res21: Validated[NonEmptyList[String], Name] = Valid(a = "Carol Danvers")\n\nval name6 = "Kal-El"\n// name6: String = "Kal-El"\nname6.validateNelAs[Name]\n// res22: Validated[NonEmptyList[String], Name] = Valid(a = "Kal-El")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"".validateNelAs[Name]\n// res23: Validated[NonEmptyList[String], Name] = Invalid(\n//   e = NonEmptyList(\n//     head = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String",\n//     tail = List()\n//   )\n// )\n\nval invalidName6 = ""\n// invalidName6: String = ""\ninvalidName6.validateNelAs[Name]\n// res24: Validated[NonEmptyList[String], Name] = Invalid(\n//   e = NonEmptyList(\n//     head = "Failed to create repl.MdocSession.MdocApp0.Name: Invalid value: []. It must be a non-empty String",\n//     tail = List()\n//   )\n// )\n'})})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>d});var t=a(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);